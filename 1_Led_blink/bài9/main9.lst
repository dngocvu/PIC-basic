CCS PCM C Compiler, Version 5.078, 43599               05-Nov-18 10:39

               Filename:   E:\bai tap vdk\button\bài9\main9.lst

               ROM used:   170 words (2%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <main9.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  FF
001C:  MOVWF  20
001D:  BSF    03.5
001E:  BSF    03.6
001F:  MOVF   09,W
0020:  ANDLW  C0
0021:  MOVWF  09
0022:  BCF    03.6
0023:  BCF    1F.4
0024:  BCF    1F.5
0025:  MOVLW  00
0026:  BSF    03.6
0027:  MOVWF  08
0028:  BCF    03.5
0029:  CLRF   07
002A:  CLRF   08
002B:  CLRF   09
002C:  BCF    03.7
.................... { 
....................   set_tris_c(0x00); 
002D:  MOVLW  00
002E:  BSF    03.5
002F:  BCF    03.6
0030:  MOVWF  07
0031:  BCF    03.5
0032:  MOVWF  20
....................   output_c(0xff); 
0033:  MOVWF  20
0034:  BSF    03.5
0035:  CLRF   07
0036:  MOVLW  FF
0037:  BCF    03.5
0038:  MOVWF  07
....................    while(TRUE) 
....................    { 
....................    output_c(0xfe);  
0039:  MOVLW  00
003A:  MOVWF  20
003B:  BSF    03.5
003C:  CLRF   07
003D:  MOVLW  FE
003E:  BCF    03.5
003F:  MOVWF  07
....................    delay_ms(300); 
0040:  MOVLW  02
0041:  MOVWF  21
0042:  MOVLW  96
0043:  MOVWF  22
0044:  CALL   004
0045:  DECFSZ 21,F
0046:  GOTO   042
....................    output_c(0xfc);  
0047:  MOVLW  00
0048:  MOVWF  20
0049:  BSF    03.5
004A:  CLRF   07
004B:  MOVLW  FC
004C:  BCF    03.5
004D:  MOVWF  07
....................    delay_ms(300); 
004E:  MOVLW  02
004F:  MOVWF  21
0050:  MOVLW  96
0051:  MOVWF  22
0052:  CALL   004
0053:  DECFSZ 21,F
0054:  GOTO   050
....................    output_c(0xf8);  
0055:  MOVLW  00
0056:  MOVWF  20
0057:  BSF    03.5
0058:  CLRF   07
0059:  MOVLW  F8
005A:  BCF    03.5
005B:  MOVWF  07
....................    delay_ms(300); 
005C:  MOVLW  02
005D:  MOVWF  21
005E:  MOVLW  96
005F:  MOVWF  22
0060:  CALL   004
0061:  DECFSZ 21,F
0062:  GOTO   05E
....................    output_c(0xf0);  
0063:  MOVLW  00
0064:  MOVWF  20
0065:  BSF    03.5
0066:  CLRF   07
0067:  MOVLW  F0
0068:  BCF    03.5
0069:  MOVWF  07
....................    delay_ms(300); 
006A:  MOVLW  02
006B:  MOVWF  21
006C:  MOVLW  96
006D:  MOVWF  22
006E:  CALL   004
006F:  DECFSZ 21,F
0070:  GOTO   06C
....................    output_c(0xe0);  
0071:  MOVLW  00
0072:  MOVWF  20
0073:  BSF    03.5
0074:  CLRF   07
0075:  MOVLW  E0
0076:  BCF    03.5
0077:  MOVWF  07
....................    delay_ms(300); 
0078:  MOVLW  02
0079:  MOVWF  21
007A:  MOVLW  96
007B:  MOVWF  22
007C:  CALL   004
007D:  DECFSZ 21,F
007E:  GOTO   07A
....................    output_c(0xc0);  
007F:  MOVLW  00
0080:  MOVWF  20
0081:  BSF    03.5
0082:  CLRF   07
0083:  MOVLW  C0
0084:  BCF    03.5
0085:  MOVWF  07
....................    delay_ms(300); 
0086:  MOVLW  02
0087:  MOVWF  21
0088:  MOVLW  96
0089:  MOVWF  22
008A:  CALL   004
008B:  DECFSZ 21,F
008C:  GOTO   088
....................    output_c(0x80);  
008D:  MOVLW  00
008E:  MOVWF  20
008F:  BSF    03.5
0090:  CLRF   07
0091:  MOVLW  80
0092:  BCF    03.5
0093:  MOVWF  07
....................    delay_ms(300); 
0094:  MOVLW  02
0095:  MOVWF  21
0096:  MOVLW  96
0097:  MOVWF  22
0098:  CALL   004
0099:  DECFSZ 21,F
009A:  GOTO   096
....................    output_c(0x00);  
009B:  MOVLW  00
009C:  MOVWF  20
009D:  BSF    03.5
009E:  CLRF   07
009F:  BCF    03.5
00A0:  CLRF   07
....................    delay_ms(300); 
00A1:  MOVLW  02
00A2:  MOVWF  21
00A3:  MOVLW  96
00A4:  MOVWF  22
00A5:  CALL   004
00A6:  DECFSZ 21,F
00A7:  GOTO   0A3
00A8:  GOTO   039
....................  
....................  
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
00A9:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
