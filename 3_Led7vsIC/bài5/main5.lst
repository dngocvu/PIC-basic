CCS PCM C Compiler, Version 5.078, 43599               05-Nov-18 21:59

               Filename:   E:\bai tap vdk\3_Led7vsIC\bài5\main5.lst

               ROM used:   380 words (5%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           9 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   14F
0003:  NOP
.................... #include <main5.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
0044:  MOVLW  23
0045:  MOVWF  04
0046:  BCF    03.7
0047:  MOVF   00,W
0048:  BTFSC  03.2
0049:  GOTO   057
004A:  MOVLW  06
004B:  MOVWF  78
004C:  CLRF   77
004D:  DECFSZ 77,F
004E:  GOTO   04D
004F:  DECFSZ 78,F
0050:  GOTO   04C
0051:  MOVLW  7B
0052:  MOVWF  77
0053:  DECFSZ 77,F
0054:  GOTO   053
0055:  DECFSZ 00,F
0056:  GOTO   04A
....................  
....................  
....................  
....................  
.................... unsigned int8 i=0; 
....................  
.................... void data(unsigned char d) 
.................... { 
....................    if(d==1) {output_high(pin_c1);} 
*
0004:  DECFSZ 22,W
0005:  GOTO   00C
0006:  BCF    21.1
0007:  MOVF   21,W
0008:  BSF    03.5
0009:  MOVWF  07
000A:  BCF    03.5
000B:  BSF    07.1
....................    if(d==0) {output_low(pin_c1);} 
000C:  MOVF   22,F
000D:  BTFSS  03.2
000E:  GOTO   015
000F:  BCF    21.1
0010:  MOVF   21,W
0011:  BSF    03.5
0012:  MOVWF  07
0013:  BCF    03.5
0014:  BCF    07.1
0015:  RETURN
.................... } 
.................... void clk() 
.................... { 
....................    output_high(pin_c0); 
0016:  BCF    21.0
0017:  MOVF   21,W
0018:  BSF    03.5
0019:  MOVWF  07
001A:  BCF    03.5
001B:  BSF    07.0
....................    output_low(pin_c0); 
001C:  BCF    21.0
001D:  MOVF   21,W
001E:  BSF    03.5
001F:  MOVWF  07
0020:  BCF    03.5
0021:  BCF    07.0
0022:  RETURN
.................... } 
.................... void latch() 
.................... { 
....................    output_high(pin_c2); 
*
0034:  BCF    21.2
0035:  MOVF   21,W
0036:  BSF    03.5
0037:  MOVWF  07
0038:  BCF    03.5
0039:  BSF    07.2
....................    output_low(pin_c2); 
003A:  BCF    21.2
003B:  MOVF   21,W
003C:  BSF    03.5
003D:  MOVWF  07
003E:  BCF    03.5
003F:  BCF    07.2
....................    delay_ms(500); 
0040:  MOVLW  02
0041:  MOVWF  22
0042:  MOVLW  FA
0043:  MOVWF  23
*
0057:  DECFSZ 22,F
0058:  GOTO   042
0059:  RETURN
.................... } 
.................... void zero() 
.................... { 
....................    data(1); 
*
0023:  MOVLW  01
0024:  MOVWF  22
0025:  CALL   004
....................    clk(); 
0026:  CALL   016
....................    for(i=0;i<6;i++){ 
0027:  CLRF   20
0028:  MOVF   20,W
0029:  SUBLW  05
002A:  BTFSS  03.0
002B:  GOTO   031
....................    data(0); 
002C:  CLRF   22
002D:  CALL   004
....................    clk(); 
002E:  CALL   016
002F:  INCF   20,F
0030:  GOTO   028
.................... } 
0031:  BCF    0A.3
0032:  BCF    0A.4
0033:  GOTO   167 (RETURN)
.................... } 
.................... void one() 
.................... { 
....................    for(i=0;i<4;i++){ 
*
005A:  CLRF   20
005B:  MOVF   20,W
005C:  SUBLW  03
005D:  BTFSS  03.0
005E:  GOTO   065
....................    data(1); 
005F:  MOVLW  01
0060:  MOVWF  22
0061:  CALL   004
....................    clk(); 
0062:  CALL   016
0063:  INCF   20,F
0064:  GOTO   05B
....................    } 
....................    for(i=0;i<2;i++){ 
0065:  CLRF   20
0066:  MOVF   20,W
0067:  SUBLW  01
0068:  BTFSS  03.0
0069:  GOTO   06F
....................    data(0); 
006A:  CLRF   22
006B:  CALL   004
....................    clk(); 
006C:  CALL   016
006D:  INCF   20,F
006E:  GOTO   066
....................    } 
....................    data(1); 
006F:  MOVLW  01
0070:  MOVWF  22
0071:  CALL   004
....................    clk(); 
0072:  CALL   016
0073:  BCF    0A.3
0074:  BCF    0A.4
0075:  GOTO   169 (RETURN)
.................... } 
.................... void two() 
.................... { 
....................    data(0); 
0076:  CLRF   22
0077:  CALL   004
....................    clk(); 
0078:  CALL   016
....................    data(1); 
0079:  MOVLW  01
007A:  MOVWF  22
007B:  CALL   004
....................    clk(); 
007C:  CALL   016
....................    for(i=0;i<2;i++){ 
007D:  CLRF   20
007E:  MOVF   20,W
007F:  SUBLW  01
0080:  BTFSS  03.0
0081:  GOTO   087
....................    data(0); 
0082:  CLRF   22
0083:  CALL   004
....................    clk(); 
0084:  CALL   016
0085:  INCF   20,F
0086:  GOTO   07E
....................    } 
....................    data(1); 
0087:  MOVLW  01
0088:  MOVWF  22
0089:  CALL   004
....................    clk(); 
008A:  CALL   016
....................    for(i=0;i<2;i++){ 
008B:  CLRF   20
008C:  MOVF   20,W
008D:  SUBLW  01
008E:  BTFSS  03.0
008F:  GOTO   095
....................    data(0); 
0090:  CLRF   22
0091:  CALL   004
....................    clk(); 
0092:  CALL   016
0093:  INCF   20,F
0094:  GOTO   08C
....................    } 
0095:  BCF    0A.3
0096:  BCF    0A.4
0097:  GOTO   16B (RETURN)
.................... } 
.................... void three() 
.................... { 
....................    data(0); 
0098:  CLRF   22
0099:  CALL   004
....................    clk(); 
009A:  CALL   016
....................    for(i=0;i<2;i++){ 
009B:  CLRF   20
009C:  MOVF   20,W
009D:  SUBLW  01
009E:  BTFSS  03.0
009F:  GOTO   0A6
....................    data(1); 
00A0:  MOVLW  01
00A1:  MOVWF  22
00A2:  CALL   004
....................    clk(); 
00A3:  CALL   016
00A4:  INCF   20,F
00A5:  GOTO   09C
....................    } 
....................    for(i=0;i<4;i++){ 
00A6:  CLRF   20
00A7:  MOVF   20,W
00A8:  SUBLW  03
00A9:  BTFSS  03.0
00AA:  GOTO   0B0
....................    data(0); 
00AB:  CLRF   22
00AC:  CALL   004
....................    clk(); 
00AD:  CALL   016
00AE:  INCF   20,F
00AF:  GOTO   0A7
....................    } 
00B0:  BCF    0A.3
00B1:  BCF    0A.4
00B2:  GOTO   16D (RETURN)
.................... } 
.................... void four() 
.................... { 
....................    for(i=0;i<2;i++){ 
00B3:  CLRF   20
00B4:  MOVF   20,W
00B5:  SUBLW  01
00B6:  BTFSS  03.0
00B7:  GOTO   0BD
....................    data(0); 
00B8:  CLRF   22
00B9:  CALL   004
....................    clk(); 
00BA:  CALL   016
00BB:  INCF   20,F
00BC:  GOTO   0B4
....................    } 
....................    for(i=0;i<2;i++){ 
00BD:  CLRF   20
00BE:  MOVF   20,W
00BF:  SUBLW  01
00C0:  BTFSS  03.0
00C1:  GOTO   0C8
....................    data(1); 
00C2:  MOVLW  01
00C3:  MOVWF  22
00C4:  CALL   004
....................    clk(); 
00C5:  CALL   016
00C6:  INCF   20,F
00C7:  GOTO   0BE
....................    } 
....................    for(i=0;i<2;i++){ 
00C8:  CLRF   20
00C9:  MOVF   20,W
00CA:  SUBLW  01
00CB:  BTFSS  03.0
00CC:  GOTO   0D2
....................    data(0); 
00CD:  CLRF   22
00CE:  CALL   004
....................    clk(); 
00CF:  CALL   016
00D0:  INCF   20,F
00D1:  GOTO   0C9
....................    } 
....................    data(1); 
00D2:  MOVLW  01
00D3:  MOVWF  22
00D4:  CALL   004
....................    clk(); 
00D5:  CALL   016
00D6:  BCF    0A.3
00D7:  BCF    0A.4
00D8:  GOTO   16F (RETURN)
.................... } 
.................... void five() 
.................... { 
....................    for(i=0;i<2;i++){ 
00D9:  CLRF   20
00DA:  MOVF   20,W
00DB:  SUBLW  01
00DC:  BTFSS  03.0
00DD:  GOTO   0E3
....................    data(0); 
00DE:  CLRF   22
00DF:  CALL   004
....................    clk(); 
00E0:  CALL   016
00E1:  INCF   20,F
00E2:  GOTO   0DA
....................    } 
....................    data(1); 
00E3:  MOVLW  01
00E4:  MOVWF  22
00E5:  CALL   004
....................    clk(); 
00E6:  CALL   016
....................    for(i=0;i<2;i++){ 
00E7:  CLRF   20
00E8:  MOVF   20,W
00E9:  SUBLW  01
00EA:  BTFSS  03.0
00EB:  GOTO   0F1
....................    data(0); 
00EC:  CLRF   22
00ED:  CALL   004
....................    clk(); 
00EE:  CALL   016
00EF:  INCF   20,F
00F0:  GOTO   0E8
....................    } 
....................    data(1); 
00F1:  MOVLW  01
00F2:  MOVWF  22
00F3:  CALL   004
....................    clk(); 
00F4:  CALL   016
....................    data(0); 
00F5:  CLRF   22
00F6:  CALL   004
....................    clk(); 
00F7:  CALL   016
00F8:  BCF    0A.3
00F9:  BCF    0A.4
00FA:  GOTO   171 (RETURN)
.................... }   
.................... void six() 
.................... { 
....................    for(i=0;i<5;i++){ 
00FB:  CLRF   20
00FC:  MOVF   20,W
00FD:  SUBLW  04
00FE:  BTFSS  03.0
00FF:  GOTO   105
....................    data(0); 
0100:  CLRF   22
0101:  CALL   004
....................    clk(); 
0102:  CALL   016
0103:  INCF   20,F
0104:  GOTO   0FC
....................    } 
....................    data(1); 
0105:  MOVLW  01
0106:  MOVWF  22
0107:  CALL   004
....................    clk(); 
0108:  CALL   016
....................    data(0); 
0109:  CLRF   22
010A:  CALL   004
....................    clk(); 
010B:  CALL   016
010C:  BCF    0A.3
010D:  BCF    0A.4
010E:  GOTO   173 (RETURN)
.................... } 
.................... void seven() 
.................... { 
....................    for(i=0;i<4;i++){ 
010F:  CLRF   20
0110:  MOVF   20,W
0111:  SUBLW  03
0112:  BTFSS  03.0
0113:  GOTO   11A
....................    data(1); 
0114:  MOVLW  01
0115:  MOVWF  22
0116:  CALL   004
....................    clk(); 
0117:  CALL   016
0118:  INCF   20,F
0119:  GOTO   110
....................    } 
....................    for(i=0;i<3;i++){ 
011A:  CLRF   20
011B:  MOVF   20,W
011C:  SUBLW  02
011D:  BTFSS  03.0
011E:  GOTO   124
....................    data(0); 
011F:  CLRF   22
0120:  CALL   004
....................    clk(); 
0121:  CALL   016
0122:  INCF   20,F
0123:  GOTO   11B
....................    } 
0124:  BCF    0A.3
0125:  BCF    0A.4
0126:  GOTO   175 (RETURN)
.................... } 
.................... void eight() 
.................... { 
....................    for(i=0;i<7;i++){ 
0127:  CLRF   20
0128:  MOVF   20,W
0129:  SUBLW  06
012A:  BTFSS  03.0
012B:  GOTO   131
....................    data(0); 
012C:  CLRF   22
012D:  CALL   004
....................    clk(); 
012E:  CALL   016
012F:  INCF   20,F
0130:  GOTO   128
....................    } 
0131:  BCF    0A.3
0132:  BCF    0A.4
0133:  GOTO   177 (RETURN)
.................... } 
.................... void nine() 
.................... { 
....................    for(i=0;i<2;i++){ 
0134:  CLRF   20
0135:  MOVF   20,W
0136:  SUBLW  01
0137:  BTFSS  03.0
0138:  GOTO   13E
....................    data(0); 
0139:  CLRF   22
013A:  CALL   004
....................    clk(); 
013B:  CALL   016
013C:  INCF   20,F
013D:  GOTO   135
....................    } 
....................    data(1); 
013E:  MOVLW  01
013F:  MOVWF  22
0140:  CALL   004
....................    clk(); 
0141:  CALL   016
....................    for(i=0;i<4;i++){ 
0142:  CLRF   20
0143:  MOVF   20,W
0144:  SUBLW  03
0145:  BTFSS  03.0
0146:  GOTO   14C
....................    data(0); 
0147:  CLRF   22
0148:  CALL   004
....................    clk(); 
0149:  CALL   016
014A:  INCF   20,F
014B:  GOTO   143
....................    } 
014C:  BCF    0A.3
014D:  BCF    0A.4
014E:  GOTO   179 (RETURN)
.................... } 
.................... void high() 
.................... { 
....................    data(1); 
....................    clk(); 
.................... } 
.................... void low() 
.................... { 
....................    data(0); 
....................    clk(); 
.................... } 
.................... void main() 
014F:  MOVF   03,W
0150:  ANDLW  1F
0151:  MOVWF  03
0152:  CLRF   20
0153:  MOVLW  FF
0154:  MOVWF  21
0155:  BSF    03.5
0156:  BSF    03.6
0157:  MOVF   09,W
0158:  ANDLW  C0
0159:  MOVWF  09
015A:  BCF    03.6
015B:  BCF    1F.4
015C:  BCF    1F.5
015D:  MOVLW  00
015E:  BSF    03.6
015F:  MOVWF  08
0160:  BCF    03.5
0161:  CLRF   07
0162:  CLRF   08
0163:  CLRF   09
0164:  BCF    03.7
.................... { 
....................    while(TRUE) 
....................    { 
....................    //0 
....................    zero(); 
0165:  BCF    03.6
0166:  GOTO   023
....................    latch(); 
0167:  CALL   034
....................    //1 
....................    one(); 
0168:  GOTO   05A
....................    latch(); 
0169:  CALL   034
....................    //2 
....................    two(); 
016A:  GOTO   076
....................    latch(); 
016B:  CALL   034
....................    //3 
....................    three(); 
016C:  GOTO   098
....................    latch(); 
016D:  CALL   034
....................    //4 
....................    four(); 
016E:  GOTO   0B3
....................    latch(); 
016F:  CALL   034
....................    //5 
....................    five(); 
0170:  GOTO   0D9
....................    latch(); 
0171:  CALL   034
....................    //6 
....................    six(); 
0172:  GOTO   0FB
....................    latch(); 
0173:  CALL   034
....................    //7 
....................    seven(); 
0174:  GOTO   10F
....................    latch(); 
0175:  CALL   034
....................    //8 
....................    eight(); 
0176:  GOTO   127
....................    latch();    
0177:  CALL   034
....................    //9 
....................    nine(); 
0178:  GOTO   134
....................    latch(); 
0179:  CALL   034
017A:  GOTO   166
....................     
....................     
....................       //TODO: User Code 
....................   } 
.................... } 
....................  
017B:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
