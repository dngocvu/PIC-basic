CCS PCM C Compiler, Version 5.078, 43599               06-Nov-18 09:56

               Filename:   E:\bai tap vdk\4_Button\bài5\main5.lst

               ROM used:   141 words (2%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           13 (4%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   01A
0003:  NOP
.................... #define S1    PIN_D0 
.................... #define S2    PIN_D1 
.................... #define LED1  PIN_D3 
....................  
.................... #include <main5.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0004:  MOVLW  26
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  BCF    0A.3
0018:  BCF    0A.4
0019:  GOTO   08A (RETURN)
....................  
....................  
....................  
.................... char S1_state=0; 
.................... char LED1_state=0; 
.................... int16  delaycntON=0; 
.................... int16  delaycntOFF=0; 
....................  
.................... void main() 
001A:  MOVF   03,W
001B:  ANDLW  1F
001C:  MOVWF  03
001D:  CLRF   20
001E:  CLRF   21
001F:  CLRF   23
0020:  CLRF   22
0021:  CLRF   25
0022:  CLRF   24
0023:  BSF    03.5
0024:  BSF    03.6
0025:  MOVF   09,W
0026:  ANDLW  C0
0027:  MOVWF  09
0028:  BCF    03.6
0029:  BCF    1F.4
002A:  BCF    1F.5
002B:  MOVLW  00
002C:  BSF    03.6
002D:  MOVWF  08
002E:  BCF    03.5
002F:  CLRF   07
0030:  CLRF   08
0031:  CLRF   09
0032:  BCF    03.7
....................  
.................... { 
....................    set_tris_d(0b11110111); 
0033:  MOVLW  F7
0034:  BSF    03.5
0035:  BCF    03.6
0036:  MOVWF  08
....................    output_bit(LED1,0); 
0037:  BCF    03.5
0038:  BCF    08.3
0039:  BSF    03.5
003A:  BCF    08.3
....................    while(TRUE)    
....................       { 
....................          if (input(S1)==1) S1_state=1; 
003B:  BSF    08.0
003C:  BCF    03.5
003D:  BTFSS  08.0
003E:  GOTO   041
003F:  MOVLW  01
0040:  MOVWF  20
....................          if ((input(S1)==0)&(S1_state==1))  
0041:  BSF    03.5
0042:  BSF    08.0
0043:  MOVLW  00
0044:  BCF    03.5
0045:  BTFSS  08.0
0046:  MOVLW  01
0047:  MOVWF  27
0048:  DECFSZ 20,W
0049:  GOTO   04B
004A:  GOTO   04D
004B:  MOVLW  00
004C:  GOTO   04E
004D:  MOVLW  01
004E:  ANDWF  27,W
004F:  BTFSC  03.2
0050:  GOTO   054
....................          { 
....................             LED1_state=1; 
0051:  MOVLW  01
0052:  MOVWF  21
....................             S1_state=0; 
0053:  CLRF   20
....................          } 
....................          if (input(S2)==1)   
0054:  BSF    03.5
0055:  BSF    08.1
0056:  BCF    03.5
0057:  BTFSC  08.1
....................             LED1_state=0; 
0058:  CLRF   21
....................          if(LED1_state==0)  
0059:  MOVF   21,F
005A:  BTFSS  03.2
005B:  GOTO   061
....................             output_bit(LED1,0); 
005C:  BCF    08.3
005D:  BSF    03.5
005E:  BCF    08.3
005F:  GOTO   08B
0060:  BCF    03.5
....................          else  
....................          { 
....................             if (delaycntON<1000)  
0061:  MOVF   23,W
0062:  SUBLW  03
0063:  BTFSS  03.0
0064:  GOTO   070
0065:  BTFSS  03.2
0066:  GOTO   06B
0067:  MOVF   22,W
0068:  SUBLW  E7
0069:  BTFSS  03.0
006A:  GOTO   070
....................                output_bit(LED1,1); 
006B:  BSF    08.3
006C:  BSF    03.5
006D:  BCF    08.3
006E:  GOTO   082
006F:  BCF    03.5
....................             else if (delaycntON<2000) 
0070:  MOVF   23,W
0071:  SUBLW  07
0072:  BTFSS  03.0
0073:  GOTO   07F
0074:  BTFSS  03.2
0075:  GOTO   07A
0076:  MOVF   22,W
0077:  SUBLW  CF
0078:  BTFSS  03.0
0079:  GOTO   07F
....................                output_bit(LED1,0); 
007A:  BCF    08.3
007B:  BSF    03.5
007C:  BCF    08.3
007D:  GOTO   082
007E:  BCF    03.5
....................                else delaycntON=0; 
007F:  CLRF   23
0080:  CLRF   22
0081:  BSF    03.5
....................          delaycntON = delaycntON+1; 
0082:  MOVLW  01
0083:  BCF    03.5
0084:  ADDWF  22,F
0085:  BTFSC  03.0
0086:  INCF   23,F
....................          delay_ms(1); 
0087:  MOVLW  01
0088:  MOVWF  26
0089:  GOTO   004
008A:  BSF    03.5
....................          } 
008B:  GOTO   03B
....................        
....................       //TODO: User Code 
....................       } 
....................  
.................... } 
008C:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
