CCS PCM C Compiler, Version 5.078, 43599               05-Nov-18 09:54

               Filename:   E:\bai tap vdk\button\bài5\main5.lst

               ROM used:   170 words (2%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <main5.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  FF
001C:  MOVWF  20
001D:  BSF    03.5
001E:  BSF    03.6
001F:  MOVF   09,W
0020:  ANDLW  C0
0021:  MOVWF  09
0022:  BCF    03.6
0023:  BCF    1F.4
0024:  BCF    1F.5
0025:  MOVLW  00
0026:  BSF    03.6
0027:  MOVWF  08
0028:  BCF    03.5
0029:  CLRF   07
002A:  CLRF   08
002B:  CLRF   09
002C:  BCF    03.7
.................... { 
....................   set_tris_c(0x00); //port output 
002D:  MOVLW  00
002E:  BSF    03.5
002F:  BCF    03.6
0030:  MOVWF  07
0031:  BCF    03.5
0032:  MOVWF  20
....................   output_c(0x00); //low 
0033:  MOVWF  20
0034:  BSF    03.5
0035:  CLRF   07
0036:  BCF    03.5
0037:  CLRF   07
....................    while(TRUE) 
....................    { 
....................    output_c(0x01);  
0038:  MOVLW  00
0039:  MOVWF  20
003A:  BSF    03.5
003B:  CLRF   07
003C:  MOVLW  01
003D:  BCF    03.5
003E:  MOVWF  07
....................    delay_ms(300); 
003F:  MOVLW  02
0040:  MOVWF  21
0041:  MOVLW  96
0042:  MOVWF  22
0043:  CALL   004
0044:  DECFSZ 21,F
0045:  GOTO   041
....................    output_c(0x03);  
0046:  MOVLW  00
0047:  MOVWF  20
0048:  BSF    03.5
0049:  CLRF   07
004A:  MOVLW  03
004B:  BCF    03.5
004C:  MOVWF  07
....................    delay_ms(300); 
004D:  MOVLW  02
004E:  MOVWF  21
004F:  MOVLW  96
0050:  MOVWF  22
0051:  CALL   004
0052:  DECFSZ 21,F
0053:  GOTO   04F
....................    output_c(0x07);  
0054:  MOVLW  00
0055:  MOVWF  20
0056:  BSF    03.5
0057:  CLRF   07
0058:  MOVLW  07
0059:  BCF    03.5
005A:  MOVWF  07
....................    delay_ms(300); 
005B:  MOVLW  02
005C:  MOVWF  21
005D:  MOVLW  96
005E:  MOVWF  22
005F:  CALL   004
0060:  DECFSZ 21,F
0061:  GOTO   05D
....................    output_c(0x0f);  
0062:  MOVLW  00
0063:  MOVWF  20
0064:  BSF    03.5
0065:  CLRF   07
0066:  MOVLW  0F
0067:  BCF    03.5
0068:  MOVWF  07
....................    delay_ms(300); 
0069:  MOVLW  02
006A:  MOVWF  21
006B:  MOVLW  96
006C:  MOVWF  22
006D:  CALL   004
006E:  DECFSZ 21,F
006F:  GOTO   06B
....................    output_c(0x1f);  
0070:  MOVLW  00
0071:  MOVWF  20
0072:  BSF    03.5
0073:  CLRF   07
0074:  MOVLW  1F
0075:  BCF    03.5
0076:  MOVWF  07
....................    delay_ms(300); 
0077:  MOVLW  02
0078:  MOVWF  21
0079:  MOVLW  96
007A:  MOVWF  22
007B:  CALL   004
007C:  DECFSZ 21,F
007D:  GOTO   079
....................    output_c(0x3f);  
007E:  MOVLW  00
007F:  MOVWF  20
0080:  BSF    03.5
0081:  CLRF   07
0082:  MOVLW  3F
0083:  BCF    03.5
0084:  MOVWF  07
....................    delay_ms(300); 
0085:  MOVLW  02
0086:  MOVWF  21
0087:  MOVLW  96
0088:  MOVWF  22
0089:  CALL   004
008A:  DECFSZ 21,F
008B:  GOTO   087
....................    output_c(0x7f);  
008C:  MOVLW  00
008D:  MOVWF  20
008E:  BSF    03.5
008F:  CLRF   07
0090:  MOVLW  7F
0091:  BCF    03.5
0092:  MOVWF  07
....................    delay_ms(300); 
0093:  MOVLW  02
0094:  MOVWF  21
0095:  MOVLW  96
0096:  MOVWF  22
0097:  CALL   004
0098:  DECFSZ 21,F
0099:  GOTO   095
....................    output_c(0xff);  
009A:  MOVLW  00
009B:  MOVWF  20
009C:  BSF    03.5
009D:  CLRF   07
009E:  MOVLW  FF
009F:  BCF    03.5
00A0:  MOVWF  07
....................    delay_ms(300); 
00A1:  MOVLW  02
00A2:  MOVWF  21
00A3:  MOVLW  96
00A4:  MOVWF  22
00A5:  CALL   004
00A6:  DECFSZ 21,F
00A7:  GOTO   0A3
00A8:  GOTO   038
....................     
....................     
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
....................  
00A9:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
