CCS PCM C Compiler, Version 5.078, 43599               07-Nov-18 23:00

               Filename:   E:\bai tap vdk\4_Button\bài13\main13.lst

               ROM used:   294 words (4%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           17 (5%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   063
0003:  NOP
.................... #include <main13.h> // ****CODE THAM KHAO****  
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0004:  MOVLW  2B
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... int1 doubleclick() 
0018:  CLRF   29
0019:  CLRF   28
001A:  CLRF   2A
.................... { 
....................    int16 count=0; 
....................    int8 t=0; 
....................    if(t==0 & (input(PIN_D0)==1)) 
001B:  MOVF   2A,F
001C:  BTFSC  03.2
001D:  GOTO   020
001E:  MOVLW  00
001F:  GOTO   021
0020:  MOVLW  01
0021:  MOVWF  2B
0022:  BSF    03.5
0023:  BSF    08.0
0024:  MOVLW  00
0025:  BCF    03.5
0026:  BTFSC  08.0
0027:  MOVLW  01
0028:  ANDWF  2B,W
0029:  BTFSC  03.2
002A:  GOTO   05E
....................       { 
....................          while(count<20) 
002B:  MOVF   29,F
002C:  BTFSS  03.2
002D:  GOTO   05E
002E:  MOVF   28,W
002F:  SUBLW  13
0030:  BTFSS  03.0
0031:  GOTO   05E
....................          { 
....................             delay_ms(1); 
0032:  MOVLW  01
0033:  MOVWF  2B
0034:  CALL   004
....................             count++; 
0035:  INCF   28,F
0036:  BTFSC  03.2
0037:  INCF   29,F
....................             if(t==0 & (input(PIN_D0)==0)) t=1; 
0038:  MOVF   2A,F
0039:  BTFSC  03.2
003A:  GOTO   03D
003B:  MOVLW  00
003C:  GOTO   03E
003D:  MOVLW  01
003E:  MOVWF  2B
003F:  BSF    03.5
0040:  BSF    08.0
0041:  MOVLW  00
0042:  BCF    03.5
0043:  BTFSS  08.0
0044:  MOVLW  01
0045:  ANDWF  2B,W
0046:  BTFSC  03.2
0047:  GOTO   04A
0048:  MOVLW  01
0049:  MOVWF  2A
....................             if(t==1 & (input(PIN_D0)==1)) return 1; 
004A:  DECFSZ 2A,W
004B:  GOTO   04D
004C:  GOTO   04F
004D:  MOVLW  00
004E:  GOTO   050
004F:  MOVLW  01
0050:  MOVWF  2B
0051:  BSF    03.5
0052:  BSF    08.0
0053:  MOVLW  00
0054:  BCF    03.5
0055:  BTFSC  08.0
0056:  MOVLW  01
0057:  ANDWF  2B,W
0058:  BTFSC  03.2
0059:  GOTO   05D
005A:  MOVLW  01
005B:  MOVWF  78
005C:  GOTO   060
005D:  GOTO   02B
....................          } 
....................       } 
....................    return 0; 
005E:  MOVLW  00
005F:  MOVWF  78
0060:  BCF    0A.3
0061:  BCF    0A.4
0062:  GOTO   0B1 (RETURN)
.................... } 
....................  
.................... void main() 
0063:  MOVF   03,W
0064:  ANDLW  1F
0065:  MOVWF  03
0066:  BSF    03.5
0067:  BSF    03.6
0068:  MOVF   09,W
0069:  ANDLW  C0
006A:  MOVWF  09
006B:  BCF    03.6
006C:  BCF    1F.4
006D:  BCF    1F.5
006E:  MOVLW  00
006F:  BSF    03.6
0070:  MOVWF  08
0071:  BCF    03.5
0072:  CLRF   07
0073:  CLRF   08
0074:  CLRF   09
0075:  BCF    03.7
.................... { 
....................   set_tris_d(0xf3); 
0076:  MOVLW  F3
0077:  BSF    03.5
0078:  BCF    03.6
0079:  MOVWF  08
....................   output_bit(PIN_D3,0); 
007A:  BCF    03.5
007B:  BCF    08.3
007C:  BSF    03.5
007D:  BCF    08.3
....................  
....................   int8 state=0; 
....................   int16 dem=0; 
....................   int1 nhan=0,dat_time=0; 
007E:  BCF    03.5
007F:  CLRF   21
0080:  CLRF   23
0081:  CLRF   22
0082:  BCF    24.0
0083:  BCF    24.1
....................    while(TRUE) 
....................    {  
....................       // int16 dem=0; 
....................        if(state==0 & (input(PIN_D0)==1)) state=1; 
0084:  MOVF   21,F
0085:  BTFSC  03.2
0086:  GOTO   089
0087:  MOVLW  00
0088:  GOTO   08A
0089:  MOVLW  01
008A:  MOVWF  27
008B:  BSF    03.5
008C:  BSF    08.0
008D:  MOVLW  00
008E:  BCF    03.5
008F:  BTFSC  08.0
0090:  MOVLW  01
0091:  ANDWF  27,W
0092:  BTFSC  03.2
0093:  GOTO   096
0094:  MOVLW  01
0095:  MOVWF  21
....................        if(state==1 & (input(PIN_D0)==0)) state=2; 
0096:  DECFSZ 21,W
0097:  GOTO   099
0098:  GOTO   09B
0099:  MOVLW  00
009A:  GOTO   09C
009B:  MOVLW  01
009C:  MOVWF  27
009D:  BSF    03.5
009E:  BSF    08.0
009F:  MOVLW  00
00A0:  BCF    03.5
00A1:  BTFSS  08.0
00A2:  MOVLW  01
00A3:  ANDWF  27,W
00A4:  BTFSC  03.2
00A5:  GOTO   0A8
00A6:  MOVLW  02
00A7:  MOVWF  21
....................        if(state==2 & (doubleclick()==1)) state=3; 
00A8:  MOVF   21,W
00A9:  SUBLW  02
00AA:  BTFSC  03.2
00AB:  GOTO   0AE
00AC:  MOVLW  00
00AD:  GOTO   0AF
00AE:  MOVLW  01
00AF:  MOVWF  27
00B0:  GOTO   018
00B1:  DECFSZ 78,W
00B2:  GOTO   0B4
00B3:  GOTO   0B6
00B4:  MOVLW  00
00B5:  GOTO   0B7
00B6:  MOVLW  01
00B7:  ANDWF  27,W
00B8:  BTFSC  03.2
00B9:  GOTO   0BC
00BA:  MOVLW  03
00BB:  MOVWF  21
....................        if(state==3 & (input(PIN_D0)==0)) state=4;     
00BC:  MOVF   21,W
00BD:  SUBLW  03
00BE:  BTFSC  03.2
00BF:  GOTO   0C2
00C0:  MOVLW  00
00C1:  GOTO   0C3
00C2:  MOVLW  01
00C3:  MOVWF  27
00C4:  BSF    03.5
00C5:  BSF    08.0
00C6:  MOVLW  00
00C7:  BCF    03.5
00C8:  BTFSS  08.0
00C9:  MOVLW  01
00CA:  ANDWF  27,W
00CB:  BTFSC  03.2
00CC:  GOTO   0CF
00CD:  MOVLW  04
00CE:  MOVWF  21
....................        if(state==0||state==1) output_low(PIN_D3); 
00CF:  MOVF   21,F
00D0:  BTFSC  03.2
00D1:  GOTO   0D4
00D2:  DECFSZ 21,W
00D3:  GOTO   0D8
00D4:  BSF    03.5
00D5:  BCF    08.3
00D6:  BCF    03.5
00D7:  BCF    08.3
....................        if(state==2) output_high(PIN_D3); 
00D8:  MOVF   21,W
00D9:  SUBLW  02
00DA:  BTFSS  03.2
00DB:  GOTO   0E0
00DC:  BSF    03.5
00DD:  BCF    08.3
00DE:  BCF    03.5
00DF:  BSF    08.3
....................        if(state==4) 
00E0:  MOVF   21,W
00E1:  SUBLW  04
00E2:  BTFSS  03.2
00E3:  GOTO   124
....................          { 
....................             for(int16 i=0;i<40;i++) 
00E4:  CLRF   26
00E5:  CLRF   25
00E6:  MOVF   26,F
00E7:  BTFSS  03.2
00E8:  GOTO   124
00E9:  MOVF   25,W
00EA:  SUBLW  27
00EB:  BTFSS  03.0
00EC:  GOTO   124
....................             { 
....................                output_bit(PIN_D3,(i)<20); 
00ED:  MOVF   26,F
00EE:  BTFSS  03.2
00EF:  GOTO   0F4
00F0:  MOVF   25,W
00F1:  SUBLW  13
00F2:  BTFSC  03.0
00F3:  GOTO   0F6
00F4:  BCF    08.3
00F5:  GOTO   0F7
00F6:  BSF    08.3
00F7:  BSF    03.5
00F8:  BCF    08.3
....................                delay_ms(1); 
00F9:  MOVLW  01
00FA:  BCF    03.5
00FB:  MOVWF  2B
00FC:  CALL   004
....................                if(input(PIN_D0)) 
00FD:  BSF    03.5
00FE:  BSF    08.0
00FF:  BCF    03.5
0100:  BTFSC  08.0
....................                { 
....................                   nhan=1;// kiemtranhan=1;                
0101:  BSF    24.0
....................                } 
....................                if(nhan==1) dem++; 
0102:  BTFSS  24.0
0103:  GOTO   107
0104:  INCF   22,F
0105:  BTFSC  03.2
0106:  INCF   23,F
....................                if(dem>100)  
0107:  MOVF   23,F
0108:  BTFSS  03.2
0109:  GOTO   10E
010A:  MOVF   22,W
010B:  SUBLW  64
010C:  BTFSC  03.0
010D:  GOTO   111
....................                {   
....................                   dat_time=1; 
010E:  BSF    24.1
....................                   dem=0; 
010F:  CLRF   23
0110:  CLRF   22
....................                } 
....................             if(nhan==1 && (input(PIN_D0)==0)) 
0111:  BTFSS  24.0
0112:  GOTO   120
0113:  BSF    03.5
0114:  BSF    08.0
0115:  BCF    03.5
0116:  BTFSC  08.0
0117:  GOTO   120
....................                { 
....................                   nhan=0; 
0118:  BCF    24.0
....................              //  kiemtranhan=0; 
....................                   dem=0; 
0119:  CLRF   23
011A:  CLRF   22
....................                   if(dat_time) 
011B:  BTFSS  24.1
011C:  GOTO   120
....................                   { 
....................                      state=0; 
011D:  CLRF   21
....................                      dat_time=0; 
011E:  BCF    24.1
....................                      break; 
011F:  GOTO   124
....................                   } 
....................                } 
0120:  INCF   25,F
0121:  BTFSC  03.2
0122:  INCF   26,F
0123:  GOTO   0E6
....................             } 
....................        }        
0124:  GOTO   084
....................    } 
.................... } 
....................  
0125:  SLEEP
....................  
.................... //****CODE BUG**** 
.................... /* 
.................... #define S1     PIN_D0 
.................... #define LED1   PIN_D3 
....................  
.................... #include <main13.h> 
....................  
.................... char click=0; 
.................... int16 i=0; 
.................... int16 n=0;                        //coutertime500    
.................... void main() 
.................... {   
....................    set_tris_d(0b11110111); 
....................    output_bit(LED1,0);      
....................    while(TRUE) 
....................    { 
....................       if(input(S1)==1) 
....................          { 
....................             while(input(S1)==1); //firstclick 
....................                click=1;       
....................             for(i=0;i<2000;i++)   //time for doubleclick 
....................             { 
....................                if(input(S1)==1)  //secondclick 
....................                    { 
....................                      //while(input(S1)==1); 
....................                      while(true) 
....................                         { 
....................                         output_bit(LED1,1);//output2 
....................                         delay_ms(10); 
....................                         output_bit(LED1,0); 
....................                         delay_ms(10);                     
....................                         } 
....................                         click=2;  //doubleclick 
....................                         break; 
....................                   } 
....................             } 
....................          } 
....................       if(click==1) 
....................          output_bit(LED1,1); //output1 
....................       if(click==2 && (input(S1)==1)) 
....................          { 
....................          while(input(S1)==1) 
....................          {      
....................           
....................                output_bit(LED1,0); 
....................                click=0; 
....................                break; 
....................          } 
....................         // break; 
....................          } 
....................       //TODO: User Code 
....................    } 
.................... } 
.................... */ 

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
