CCS PCM C Compiler, Version 5.078, 43599               06-Nov-18 22:46

               Filename:   E:\bai tap vdk\4_Button\bài7\main7.lst

               ROM used:   293 words (4%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           13 (4%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #define S1    PIN_D0 
.................... #define S2    PIN_D1 
.................... #define LED1  PIN_D3 
.................... #define LED2  PIN_D4 
.................... #define LED3  PIN_D5 
....................  
.................... #include <main7.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
....................  
....................  
....................  
.................... char phase=0; 
.................... char output_state=0; 
.................... int16  delaycntON=0; 
.................... int16  delaycntOFF=0; 
....................  
.................... void main() 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  CLRF   20
0008:  CLRF   21
0009:  CLRF   23
000A:  CLRF   22
000B:  CLRF   25
000C:  CLRF   24
000D:  BSF    03.5
000E:  BSF    03.6
000F:  MOVF   09,W
0010:  ANDLW  C0
0011:  MOVWF  09
0012:  BCF    03.6
0013:  BCF    1F.4
0014:  BCF    1F.5
0015:  MOVLW  00
0016:  BSF    03.6
0017:  MOVWF  08
0018:  BCF    03.5
0019:  CLRF   07
001A:  CLRF   08
001B:  CLRF   09
001C:  BCF    03.7
....................  
.................... { 
....................    set_tris_d(0b11000111); 
001D:  MOVLW  C7
001E:  BSF    03.5
001F:  BCF    03.6
0020:  MOVWF  08
....................    output_bit(LED1,0); 
0021:  BCF    03.5
0022:  BCF    08.3
0023:  BSF    03.5
0024:  BCF    08.3
....................    while(TRUE)    
....................    { 
....................       // input + process 
....................       if ((phase==0)&(input(S1)==1)) phase=1; 
0025:  BCF    03.5
0026:  MOVF   20,F
0027:  BTFSC  03.2
0028:  GOTO   02B
0029:  MOVLW  00
002A:  GOTO   02C
002B:  MOVLW  01
002C:  MOVWF  26
002D:  BSF    03.5
002E:  BSF    08.0
002F:  MOVLW  00
0030:  BCF    03.5
0031:  BTFSC  08.0
0032:  MOVLW  01
0033:  ANDWF  26,W
0034:  BTFSC  03.2
0035:  GOTO   038
0036:  MOVLW  01
0037:  MOVWF  20
....................       if ((phase==1)&(input(S1)==0)) phase=2; 
0038:  DECFSZ 20,W
0039:  GOTO   03B
003A:  GOTO   03D
003B:  MOVLW  00
003C:  GOTO   03E
003D:  MOVLW  01
003E:  MOVWF  26
003F:  BSF    03.5
0040:  BSF    08.0
0041:  MOVLW  00
0042:  BCF    03.5
0043:  BTFSS  08.0
0044:  MOVLW  01
0045:  ANDWF  26,W
0046:  BTFSC  03.2
0047:  GOTO   04A
0048:  MOVLW  02
0049:  MOVWF  20
....................       if ((phase==2)&(input(S1)==1)) phase=3; 
004A:  MOVF   20,W
004B:  SUBLW  02
004C:  BTFSC  03.2
004D:  GOTO   050
004E:  MOVLW  00
004F:  GOTO   051
0050:  MOVLW  01
0051:  MOVWF  26
0052:  BSF    03.5
0053:  BSF    08.0
0054:  MOVLW  00
0055:  BCF    03.5
0056:  BTFSC  08.0
0057:  MOVLW  01
0058:  ANDWF  26,W
0059:  BTFSC  03.2
005A:  GOTO   05D
005B:  MOVLW  03
005C:  MOVWF  20
....................       if ((phase==3)&(input(S1)==0)) phase=4; 
005D:  MOVF   20,W
005E:  SUBLW  03
005F:  BTFSC  03.2
0060:  GOTO   063
0061:  MOVLW  00
0062:  GOTO   064
0063:  MOVLW  01
0064:  MOVWF  26
0065:  BSF    03.5
0066:  BSF    08.0
0067:  MOVLW  00
0068:  BCF    03.5
0069:  BTFSS  08.0
006A:  MOVLW  01
006B:  ANDWF  26,W
006C:  BTFSC  03.2
006D:  GOTO   070
006E:  MOVLW  04
006F:  MOVWF  20
....................       if ((phase==4)&(input(S1)==1)) phase=5; 
0070:  MOVF   20,W
0071:  SUBLW  04
0072:  BTFSC  03.2
0073:  GOTO   076
0074:  MOVLW  00
0075:  GOTO   077
0076:  MOVLW  01
0077:  MOVWF  26
0078:  BSF    03.5
0079:  BSF    08.0
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  08.0
007D:  MOVLW  01
007E:  ANDWF  26,W
007F:  BTFSC  03.2
0080:  GOTO   083
0081:  MOVLW  05
0082:  MOVWF  20
....................       if ((phase==5)&(input(S1)==0)) phase=6; 
0083:  MOVF   20,W
0084:  SUBLW  05
0085:  BTFSC  03.2
0086:  GOTO   089
0087:  MOVLW  00
0088:  GOTO   08A
0089:  MOVLW  01
008A:  MOVWF  26
008B:  BSF    03.5
008C:  BSF    08.0
008D:  MOVLW  00
008E:  BCF    03.5
008F:  BTFSS  08.0
0090:  MOVLW  01
0091:  ANDWF  26,W
0092:  BTFSC  03.2
0093:  GOTO   096
0094:  MOVLW  06
0095:  MOVWF  20
....................       if ((phase==6)&(input(S1)==1)) phase=7; 
0096:  MOVF   20,W
0097:  SUBLW  06
0098:  BTFSC  03.2
0099:  GOTO   09C
009A:  MOVLW  00
009B:  GOTO   09D
009C:  MOVLW  01
009D:  MOVWF  26
009E:  BSF    03.5
009F:  BSF    08.0
00A0:  MOVLW  00
00A1:  BCF    03.5
00A2:  BTFSC  08.0
00A3:  MOVLW  01
00A4:  ANDWF  26,W
00A5:  BTFSC  03.2
00A6:  GOTO   0A9
00A7:  MOVLW  07
00A8:  MOVWF  20
....................       if ((phase==7)&(input(S1)==0)) phase=0; 
00A9:  MOVF   20,W
00AA:  SUBLW  07
00AB:  BTFSC  03.2
00AC:  GOTO   0AF
00AD:  MOVLW  00
00AE:  GOTO   0B0
00AF:  MOVLW  01
00B0:  MOVWF  26
00B1:  BSF    03.5
00B2:  BSF    08.0
00B3:  MOVLW  00
00B4:  BCF    03.5
00B5:  BTFSS  08.0
00B6:  MOVLW  01
00B7:  ANDWF  26,W
00B8:  BTFSC  03.2
00B9:  GOTO   0BB
00BA:  CLRF   20
....................        
....................       // Control 
....................       if (phase==0) output_state=0; 
00BB:  MOVF   20,F
00BC:  BTFSS  03.2
00BD:  GOTO   0BF
00BE:  CLRF   21
....................       if (phase==1) output_state=0; 
00BF:  DECFSZ 20,W
00C0:  GOTO   0C2
00C1:  CLRF   21
....................       if (phase==2) output_state=1; 
00C2:  MOVF   20,W
00C3:  SUBLW  02
00C4:  BTFSS  03.2
00C5:  GOTO   0C8
00C6:  MOVLW  01
00C7:  MOVWF  21
....................       if (phase==3) output_state=1; 
00C8:  MOVF   20,W
00C9:  SUBLW  03
00CA:  BTFSS  03.2
00CB:  GOTO   0CE
00CC:  MOVLW  01
00CD:  MOVWF  21
....................       if (phase==4) output_state=2; 
00CE:  MOVF   20,W
00CF:  SUBLW  04
00D0:  BTFSS  03.2
00D1:  GOTO   0D4
00D2:  MOVLW  02
00D3:  MOVWF  21
....................       if (phase==5) output_state=2; 
00D4:  MOVF   20,W
00D5:  SUBLW  05
00D6:  BTFSS  03.2
00D7:  GOTO   0DA
00D8:  MOVLW  02
00D9:  MOVWF  21
....................       if (phase==6) output_state=3; 
00DA:  MOVF   20,W
00DB:  SUBLW  06
00DC:  BTFSS  03.2
00DD:  GOTO   0E0
00DE:  MOVLW  03
00DF:  MOVWF  21
....................       if (phase==7) output_state=3; 
00E0:  MOVF   20,W
00E1:  SUBLW  07
00E2:  BTFSS  03.2
00E3:  GOTO   0E6
00E4:  MOVLW  03
00E5:  MOVWF  21
....................      
....................    // Output 
....................    if (output_state==0)  
00E6:  MOVF   21,F
00E7:  BTFSS  03.2
00E8:  GOTO   0F5
....................       { 
....................          output_bit(LED1,0); 
00E9:  BCF    08.3
00EA:  BSF    03.5
00EB:  BCF    08.3
....................          output_bit(LED2,0); 
00EC:  BCF    03.5
00ED:  BCF    08.4
00EE:  BSF    03.5
00EF:  BCF    08.4
....................          output_bit(LED3,0); 
00F0:  BCF    03.5
00F1:  BCF    08.5
00F2:  BSF    03.5
00F3:  BCF    08.5
00F4:  BCF    03.5
....................       } 
....................    if (output_state==1)  
00F5:  DECFSZ 21,W
00F6:  GOTO   103
....................       { 
....................          output_bit(LED1,1); 
00F7:  BSF    08.3
00F8:  BSF    03.5
00F9:  BCF    08.3
....................          output_bit(LED2,0); 
00FA:  BCF    03.5
00FB:  BCF    08.4
00FC:  BSF    03.5
00FD:  BCF    08.4
....................          output_bit(LED3,0); 
00FE:  BCF    03.5
00FF:  BCF    08.5
0100:  BSF    03.5
0101:  BCF    08.5
0102:  BCF    03.5
....................       }  
....................    if (output_state==2)  
0103:  MOVF   21,W
0104:  SUBLW  02
0105:  BTFSS  03.2
0106:  GOTO   113
....................       { 
....................          output_bit(LED1,0); 
0107:  BCF    08.3
0108:  BSF    03.5
0109:  BCF    08.3
....................          output_bit(LED2,1); 
010A:  BCF    03.5
010B:  BSF    08.4
010C:  BSF    03.5
010D:  BCF    08.4
....................          output_bit(LED3,0); 
010E:  BCF    03.5
010F:  BCF    08.5
0110:  BSF    03.5
0111:  BCF    08.5
0112:  BCF    03.5
....................       } 
....................    if (output_state==3)  
0113:  MOVF   21,W
0114:  SUBLW  03
0115:  BTFSS  03.2
0116:  GOTO   123
....................       { 
....................          output_bit(LED1,0); 
0117:  BCF    08.3
0118:  BSF    03.5
0119:  BCF    08.3
....................          output_bit(LED2,0); 
011A:  BCF    03.5
011B:  BCF    08.4
011C:  BSF    03.5
011D:  BCF    08.4
....................          output_bit(LED3,1); 
011E:  BCF    03.5
011F:  BSF    08.5
0120:  BSF    03.5
0121:  BCF    08.5
0122:  BCF    03.5
....................       } 
0123:  GOTO   026
....................         
....................         
....................     } // End of Loop while (true) 
....................  
.................... } // End of main 
0124:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
