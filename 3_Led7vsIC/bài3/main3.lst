CCS PCM C Compiler, Version 5.078, 43599               05-Nov-18 18:57

               Filename:   E:\bai tap vdk\3_Led7vsIC\bài3\main3.lst

               ROM used:   153 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <main3.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0004:  MOVLW  21
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  FF
001C:  MOVWF  20
001D:  BSF    03.5
001E:  BSF    03.6
001F:  MOVF   09,W
0020:  ANDLW  C0
0021:  MOVWF  09
0022:  BCF    03.6
0023:  BCF    1F.4
0024:  BCF    1F.5
0025:  MOVLW  00
0026:  BSF    03.6
0027:  MOVWF  08
0028:  BCF    03.5
0029:  CLRF   07
002A:  CLRF   08
002B:  CLRF   09
002C:  BCF    03.7
.................... { 
....................     set_tris_c(0xff); 
002D:  MOVLW  FF
002E:  BSF    03.5
002F:  BCF    03.6
0030:  MOVWF  07
0031:  BCF    03.5
0032:  MOVWF  20
....................     //delay_ms(500); 
....................    while(TRUE) 
....................    { 
....................     output_c(0x90);  
0033:  MOVLW  00
0034:  MOVWF  20
0035:  BSF    03.5
0036:  CLRF   07
0037:  MOVLW  90
0038:  BCF    03.5
0039:  MOVWF  07
....................     delay_ms(100); 
003A:  MOVLW  64
003B:  MOVWF  21
003C:  CALL   004
....................     output_c(0x81);  
003D:  MOVLW  00
003E:  MOVWF  20
003F:  BSF    03.5
0040:  CLRF   07
0041:  MOVLW  81
0042:  BCF    03.5
0043:  MOVWF  07
....................     delay_ms(100); 
0044:  MOVLW  64
0045:  MOVWF  21
0046:  CALL   004
....................     output_c(0x72);  
0047:  MOVLW  00
0048:  MOVWF  20
0049:  BSF    03.5
004A:  CLRF   07
004B:  MOVLW  72
004C:  BCF    03.5
004D:  MOVWF  07
....................     delay_ms(100); 
004E:  MOVLW  64
004F:  MOVWF  21
0050:  CALL   004
....................     output_c(0x63);  
0051:  MOVLW  00
0052:  MOVWF  20
0053:  BSF    03.5
0054:  CLRF   07
0055:  MOVLW  63
0056:  BCF    03.5
0057:  MOVWF  07
....................     delay_ms(100); 
0058:  MOVLW  64
0059:  MOVWF  21
005A:  CALL   004
....................     output_c(0x54);  
005B:  MOVLW  00
005C:  MOVWF  20
005D:  BSF    03.5
005E:  CLRF   07
005F:  MOVLW  54
0060:  BCF    03.5
0061:  MOVWF  07
....................     delay_ms(100); 
0062:  MOVLW  64
0063:  MOVWF  21
0064:  CALL   004
....................     output_c(0x45);  
0065:  MOVLW  00
0066:  MOVWF  20
0067:  BSF    03.5
0068:  CLRF   07
0069:  MOVLW  45
006A:  BCF    03.5
006B:  MOVWF  07
....................     delay_ms(100); 
006C:  MOVLW  64
006D:  MOVWF  21
006E:  CALL   004
....................     output_c(0x36);  
006F:  MOVLW  00
0070:  MOVWF  20
0071:  BSF    03.5
0072:  CLRF   07
0073:  MOVLW  36
0074:  BCF    03.5
0075:  MOVWF  07
....................     delay_ms(100); 
0076:  MOVLW  64
0077:  MOVWF  21
0078:  CALL   004
....................     output_c(0x27);  
0079:  MOVLW  00
007A:  MOVWF  20
007B:  BSF    03.5
007C:  CLRF   07
007D:  MOVLW  27
007E:  BCF    03.5
007F:  MOVWF  07
....................     delay_ms(100); 
0080:  MOVLW  64
0081:  MOVWF  21
0082:  CALL   004
....................     output_c(0x18);  
0083:  MOVLW  00
0084:  MOVWF  20
0085:  BSF    03.5
0086:  CLRF   07
0087:  MOVLW  18
0088:  BCF    03.5
0089:  MOVWF  07
....................     delay_ms(100); 
008A:  MOVLW  64
008B:  MOVWF  21
008C:  CALL   004
....................     output_c(0x09);  
008D:  MOVLW  00
008E:  MOVWF  20
008F:  BSF    03.5
0090:  CLRF   07
0091:  MOVLW  09
0092:  BCF    03.5
0093:  MOVWF  07
....................     delay_ms(100); 
0094:  MOVLW  64
0095:  MOVWF  21
0096:  CALL   004
0097:  GOTO   033
....................  
....................  
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
0098:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
