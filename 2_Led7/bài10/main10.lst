CCS PCM C Compiler, Version 5.078, 43599               08-Nov-18 16:58

               Filename:   E:\bai tap vdk\2_Led7\bài10\main10.lst

               ROM used:   153 words (2%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           9 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   044
0003:  NOP
.................... #include <main10.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  0F
0009:  RETLW  06
000A:  RETLW  0B
000B:  RETLW  0F
000C:  RETLW  06
000D:  RETLW  0D
000E:  RETLW  0D
000F:  RETLW  07
0010:  RETLW  0F
0011:  RETLW  0F
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  03
0017:  RETLW  00
0018:  RETLW  05
0019:  RETLW  04
001A:  RETLW  06
001B:  RETLW  06
001C:  RETLW  07
001D:  RETLW  00
001E:  RETLW  07
001F:  RETLW  06
0020:  BCF    0A.0
0021:  BCF    0A.1
0022:  BCF    0A.2
0023:  ADDWF  02,F
0024:  RETLW  F0
0025:  RETLW  60
0026:  RETLW  B0
0027:  RETLW  F0
0028:  RETLW  60
0029:  RETLW  D0
002A:  RETLW  D0
002B:  RETLW  70
002C:  RETLW  F0
002D:  RETLW  F0
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
002E:  MOVLW  23
002F:  MOVWF  04
0030:  BCF    03.7
0031:  MOVF   00,W
0032:  BTFSC  03.2
0033:  GOTO   041
0034:  MOVLW  06
0035:  MOVWF  78
0036:  CLRF   77
0037:  DECFSZ 77,F
0038:  GOTO   037
0039:  DECFSZ 78,F
003A:  GOTO   036
003B:  MOVLW  7B
003C:  MOVWF  77
003D:  DECFSZ 77,F
003E:  GOTO   03D
003F:  DECFSZ 00,F
0040:  GOTO   034
0041:  BCF    0A.3
0042:  BCF    0A.4
0043:  GOTO   097 (RETURN)
....................  
....................  
....................  
.................... const unsigned int8 led7doan4_c[10]={0x0F,0x06,0x0B,0x0F,0x06,0x0D,0x0D,0x07,0x0F,0x0F}; 
.................... const unsigned int8 led7doan4_d3_e[10]={0x03,0x00,0x05,0x04,0x06,0x06,0x07,0x00,0x07,0x06}; 
.................... const unsigned int8 led7doan3_d[10]={0xF0,0x60,0xB0,0xF0,0x60,0xD0,0xD0,0x70,0xF0,0xF0}; 
.................... signed int8 dem,dem2; 
.................... void main() 
0044:  MOVF   03,W
0045:  ANDLW  1F
0046:  MOVWF  03
0047:  MOVLW  FF
0048:  MOVWF  22
0049:  BSF    03.5
004A:  BSF    03.6
004B:  MOVF   09,W
004C:  ANDLW  C0
004D:  MOVWF  09
004E:  BCF    03.6
004F:  BCF    1F.4
0050:  BCF    1F.5
0051:  MOVLW  00
0052:  BSF    03.6
0053:  MOVWF  08
0054:  BCF    03.5
0055:  CLRF   07
0056:  CLRF   08
0057:  CLRF   09
0058:  BCF    03.7
.................... { 
....................    set_tris_c(0x00); 
0059:  MOVLW  00
005A:  BSF    03.5
005B:  BCF    03.6
005C:  MOVWF  07
005D:  BCF    03.5
005E:  MOVWF  22
....................    set_tris_d(0x00); 
005F:  BSF    03.5
0060:  MOVWF  08
....................    set_tris_e(0x00); 
0061:  BCF    09.0
0062:  BCF    09.1
0063:  BCF    09.2
0064:  BCF    09.3
....................    dem=0; 
0065:  BCF    03.5
0066:  CLRF   20
....................    dem2=0; 
0067:  CLRF   21
....................    while(TRUE) 
....................    { 
....................      //*** led : value 
....................       output_d(led7doan3_d[dem] + led7doan4_d3_e[dem2]); 
0068:  MOVF   20,W
0069:  CALL   020
006A:  MOVWF  23
006B:  MOVF   21,W
006C:  CALL   012
006D:  MOVWF  78
006E:  ADDWF  23,F
006F:  BSF    03.5
0070:  CLRF   08
0071:  BCF    03.5
0072:  MOVF   23,W
0073:  MOVWF  08
....................       output_c(led7doan4_c[dem2]); 
0074:  MOVF   21,W
0075:  CALL   004
0076:  MOVWF  23
0077:  MOVLW  00
0078:  MOVWF  22
0079:  BSF    03.5
007A:  CLRF   07
007B:  BCF    03.5
007C:  MOVF   23,W
007D:  MOVWF  07
....................       output_e(led7doan4_d3_e[dem]); 
007E:  MOVF   20,W
007F:  CALL   012
0080:  MOVWF  23
0081:  BSF    03.5
0082:  BCF    09.0
0083:  BCF    09.1
0084:  BCF    09.2
0085:  BCF    09.3
0086:  BCF    03.5
0087:  MOVF   23,W
0088:  MOVWF  09
....................      //*** led count : 0 to 99 
....................        dem++; 
0089:  INCF   20,F
....................       if(dem==10)  
008A:  MOVF   20,W
008B:  SUBLW  0A
008C:  BTFSS  03.2
008D:  GOTO   090
....................       { 
....................          dem=0; 
008E:  CLRF   20
....................          dem2++; 
008F:  INCF   21,F
....................       } 
....................       if(dem2==10)  
0090:  MOVF   21,W
0091:  SUBLW  0A
0092:  BTFSC  03.2
....................          dem2=0; 
0093:  CLRF   21
....................       delay_ms(50); 
0094:  MOVLW  32
0095:  MOVWF  23
0096:  GOTO   02E
0097:  GOTO   068
....................  
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
0098:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
