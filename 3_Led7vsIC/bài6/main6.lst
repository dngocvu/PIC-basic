CCS PCM C Compiler, Version 5.078, 43599               05-Nov-18 21:48

               Filename:   E:\bai tap vdk\3_Led7vsIC\bài6\main6.lst

               ROM used:   385 words (5%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           9 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   140
0003:  NOP
.................... #include <main6.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
0047:  MOVLW  23
0048:  MOVWF  04
0049:  BCF    03.7
004A:  MOVF   00,W
004B:  BTFSC  03.2
004C:  GOTO   05A
004D:  MOVLW  06
004E:  MOVWF  78
004F:  CLRF   77
0050:  DECFSZ 77,F
0051:  GOTO   050
0052:  DECFSZ 78,F
0053:  GOTO   04F
0054:  MOVLW  7B
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  DECFSZ 00,F
0059:  GOTO   04D
....................  
....................  
....................  
.................... unsigned int8 i=0; 
....................  
.................... void data(unsigned char d) 
.................... { 
....................    if(d==1) {output_high(pin_c1);} 
*
0004:  DECFSZ 22,W
0005:  GOTO   00C
0006:  BCF    21.1
0007:  MOVF   21,W
0008:  BSF    03.5
0009:  MOVWF  07
000A:  BCF    03.5
000B:  BSF    07.1
....................    if(d==0) {output_low(pin_c1);} 
000C:  MOVF   22,F
000D:  BTFSS  03.2
000E:  GOTO   015
000F:  BCF    21.1
0010:  MOVF   21,W
0011:  BSF    03.5
0012:  MOVWF  07
0013:  BCF    03.5
0014:  BCF    07.1
0015:  RETURN
.................... } 
.................... void clk() 
.................... { 
....................    output_high(pin_c0); 
0016:  BCF    21.0
0017:  MOVF   21,W
0018:  BSF    03.5
0019:  MOVWF  07
001A:  BCF    03.5
001B:  BSF    07.0
....................    output_low(pin_c0); 
001C:  BCF    21.0
001D:  MOVF   21,W
001E:  BSF    03.5
001F:  MOVWF  07
0020:  BCF    03.5
0021:  BCF    07.0
0022:  RETURN
.................... } 
.................... void latch() 
.................... { 
....................    output_high(pin_c2); 
*
0037:  BCF    21.2
0038:  MOVF   21,W
0039:  BSF    03.5
003A:  MOVWF  07
003B:  BCF    03.5
003C:  BSF    07.2
....................    output_low(pin_c2); 
003D:  BCF    21.2
003E:  MOVF   21,W
003F:  BSF    03.5
0040:  MOVWF  07
0041:  BCF    03.5
0042:  BCF    07.2
....................    delay_ms(500); 
0043:  MOVLW  02
0044:  MOVWF  22
0045:  MOVLW  FA
0046:  MOVWF  23
*
005A:  DECFSZ 22,F
005B:  GOTO   045
005C:  RETURN
.................... } 
.................... void zero() 
.................... { 
....................    data(1); 
*
0023:  MOVLW  01
0024:  MOVWF  22
0025:  CALL   004
....................    clk(); 
0026:  CALL   016
....................    for(i=0;i<6;i++){ 
0027:  CLRF   20
0028:  MOVF   20,W
0029:  SUBLW  05
002A:  BTFSS  03.0
002B:  GOTO   031
....................    data(0); 
002C:  CLRF   22
002D:  CALL   004
....................    clk(); 
002E:  CALL   016
002F:  INCF   20,F
0030:  GOTO   028
.................... } 
0031:  RETURN
.................... } 
.................... void one() 
.................... { 
....................    for(i=0;i<4;i++){ 
*
005D:  CLRF   20
005E:  MOVF   20,W
005F:  SUBLW  03
0060:  BTFSS  03.0
0061:  GOTO   068
....................    data(1); 
0062:  MOVLW  01
0063:  MOVWF  22
0064:  CALL   004
....................    clk(); 
0065:  CALL   016
0066:  INCF   20,F
0067:  GOTO   05E
....................    } 
....................    for(i=0;i<2;i++){ 
0068:  CLRF   20
0069:  MOVF   20,W
006A:  SUBLW  01
006B:  BTFSS  03.0
006C:  GOTO   072
....................    data(0); 
006D:  CLRF   22
006E:  CALL   004
....................    clk(); 
006F:  CALL   016
0070:  INCF   20,F
0071:  GOTO   069
....................    } 
....................    data(1); 
0072:  MOVLW  01
0073:  MOVWF  22
0074:  CALL   004
....................    clk(); 
0075:  CALL   016
0076:  RETURN
.................... } 
.................... void two() 
.................... { 
....................    data(0); 
0077:  CLRF   22
0078:  CALL   004
....................    clk(); 
0079:  CALL   016
....................    data(1); 
007A:  MOVLW  01
007B:  MOVWF  22
007C:  CALL   004
....................    clk(); 
007D:  CALL   016
....................    for(i=0;i<2;i++){ 
007E:  CLRF   20
007F:  MOVF   20,W
0080:  SUBLW  01
0081:  BTFSS  03.0
0082:  GOTO   088
....................    data(0); 
0083:  CLRF   22
0084:  CALL   004
....................    clk(); 
0085:  CALL   016
0086:  INCF   20,F
0087:  GOTO   07F
....................    } 
....................    data(1); 
0088:  MOVLW  01
0089:  MOVWF  22
008A:  CALL   004
....................    clk(); 
008B:  CALL   016
....................    for(i=0;i<2;i++){ 
008C:  CLRF   20
008D:  MOVF   20,W
008E:  SUBLW  01
008F:  BTFSS  03.0
0090:  GOTO   096
....................    data(0); 
0091:  CLRF   22
0092:  CALL   004
....................    clk(); 
0093:  CALL   016
0094:  INCF   20,F
0095:  GOTO   08D
....................    } 
0096:  RETURN
.................... } 
.................... void three() 
.................... { 
....................    data(0); 
0097:  CLRF   22
0098:  CALL   004
....................    clk(); 
0099:  CALL   016
....................    for(i=0;i<2;i++){ 
009A:  CLRF   20
009B:  MOVF   20,W
009C:  SUBLW  01
009D:  BTFSS  03.0
009E:  GOTO   0A5
....................    data(1); 
009F:  MOVLW  01
00A0:  MOVWF  22
00A1:  CALL   004
....................    clk(); 
00A2:  CALL   016
00A3:  INCF   20,F
00A4:  GOTO   09B
....................    } 
....................    for(i=0;i<4;i++){ 
00A5:  CLRF   20
00A6:  MOVF   20,W
00A7:  SUBLW  03
00A8:  BTFSS  03.0
00A9:  GOTO   0AF
....................    data(0); 
00AA:  CLRF   22
00AB:  CALL   004
....................    clk(); 
00AC:  CALL   016
00AD:  INCF   20,F
00AE:  GOTO   0A6
....................    } 
00AF:  RETURN
.................... } 
.................... void four() 
.................... { 
....................    for(i=0;i<2;i++){ 
00B0:  CLRF   20
00B1:  MOVF   20,W
00B2:  SUBLW  01
00B3:  BTFSS  03.0
00B4:  GOTO   0BA
....................    data(0); 
00B5:  CLRF   22
00B6:  CALL   004
....................    clk(); 
00B7:  CALL   016
00B8:  INCF   20,F
00B9:  GOTO   0B1
....................    } 
....................    for(i=0;i<2;i++){ 
00BA:  CLRF   20
00BB:  MOVF   20,W
00BC:  SUBLW  01
00BD:  BTFSS  03.0
00BE:  GOTO   0C5
....................    data(1); 
00BF:  MOVLW  01
00C0:  MOVWF  22
00C1:  CALL   004
....................    clk(); 
00C2:  CALL   016
00C3:  INCF   20,F
00C4:  GOTO   0BB
....................    } 
....................    for(i=0;i<2;i++){ 
00C5:  CLRF   20
00C6:  MOVF   20,W
00C7:  SUBLW  01
00C8:  BTFSS  03.0
00C9:  GOTO   0CF
....................    data(0); 
00CA:  CLRF   22
00CB:  CALL   004
....................    clk(); 
00CC:  CALL   016
00CD:  INCF   20,F
00CE:  GOTO   0C6
....................    } 
....................    data(1); 
00CF:  MOVLW  01
00D0:  MOVWF  22
00D1:  CALL   004
....................    clk(); 
00D2:  CALL   016
00D3:  RETURN
.................... } 
.................... void five() 
.................... { 
....................    for(i=0;i<2;i++){ 
00D4:  CLRF   20
00D5:  MOVF   20,W
00D6:  SUBLW  01
00D7:  BTFSS  03.0
00D8:  GOTO   0DE
....................    data(0); 
00D9:  CLRF   22
00DA:  CALL   004
....................    clk(); 
00DB:  CALL   016
00DC:  INCF   20,F
00DD:  GOTO   0D5
....................    } 
....................    data(1); 
00DE:  MOVLW  01
00DF:  MOVWF  22
00E0:  CALL   004
....................    clk(); 
00E1:  CALL   016
....................    for(i=0;i<2;i++){ 
00E2:  CLRF   20
00E3:  MOVF   20,W
00E4:  SUBLW  01
00E5:  BTFSS  03.0
00E6:  GOTO   0EC
....................    data(0); 
00E7:  CLRF   22
00E8:  CALL   004
....................    clk(); 
00E9:  CALL   016
00EA:  INCF   20,F
00EB:  GOTO   0E3
....................    } 
....................    data(1); 
00EC:  MOVLW  01
00ED:  MOVWF  22
00EE:  CALL   004
....................    clk(); 
00EF:  CALL   016
....................    data(0); 
00F0:  CLRF   22
00F1:  CALL   004
....................    clk(); 
00F2:  CALL   016
00F3:  RETURN
.................... }   
.................... void six() 
.................... { 
....................    for(i=0;i<5;i++){ 
00F4:  CLRF   20
00F5:  MOVF   20,W
00F6:  SUBLW  04
00F7:  BTFSS  03.0
00F8:  GOTO   0FE
....................    data(0); 
00F9:  CLRF   22
00FA:  CALL   004
....................    clk(); 
00FB:  CALL   016
00FC:  INCF   20,F
00FD:  GOTO   0F5
....................    } 
....................    data(1); 
00FE:  MOVLW  01
00FF:  MOVWF  22
0100:  CALL   004
....................    clk(); 
0101:  CALL   016
....................    data(0); 
0102:  CLRF   22
0103:  CALL   004
....................    clk(); 
0104:  CALL   016
0105:  RETURN
.................... } 
.................... void seven() 
.................... { 
....................    for(i=0;i<4;i++){ 
0106:  CLRF   20
0107:  MOVF   20,W
0108:  SUBLW  03
0109:  BTFSS  03.0
010A:  GOTO   111
....................    data(1); 
010B:  MOVLW  01
010C:  MOVWF  22
010D:  CALL   004
....................    clk(); 
010E:  CALL   016
010F:  INCF   20,F
0110:  GOTO   107
....................    } 
....................    for(i=0;i<3;i++){ 
0111:  CLRF   20
0112:  MOVF   20,W
0113:  SUBLW  02
0114:  BTFSS  03.0
0115:  GOTO   11B
....................    data(0); 
0116:  CLRF   22
0117:  CALL   004
....................    clk(); 
0118:  CALL   016
0119:  INCF   20,F
011A:  GOTO   112
....................    } 
011B:  RETURN
.................... } 
.................... void eight() 
.................... { 
....................    for(i=0;i<7;i++){ 
011C:  CLRF   20
011D:  MOVF   20,W
011E:  SUBLW  06
011F:  BTFSS  03.0
0120:  GOTO   126
....................    data(0); 
0121:  CLRF   22
0122:  CALL   004
....................    clk(); 
0123:  CALL   016
0124:  INCF   20,F
0125:  GOTO   11D
....................    } 
0126:  RETURN
.................... } 
.................... void nine() 
.................... { 
....................    for(i=0;i<2;i++){ 
0127:  CLRF   20
0128:  MOVF   20,W
0129:  SUBLW  01
012A:  BTFSS  03.0
012B:  GOTO   131
....................    data(0); 
012C:  CLRF   22
012D:  CALL   004
....................    clk(); 
012E:  CALL   016
012F:  INCF   20,F
0130:  GOTO   128
....................    } 
....................    data(1); 
0131:  MOVLW  01
0132:  MOVWF  22
0133:  CALL   004
....................    clk(); 
0134:  CALL   016
....................    for(i=0;i<4;i++){ 
0135:  CLRF   20
0136:  MOVF   20,W
0137:  SUBLW  03
0138:  BTFSS  03.0
0139:  GOTO   13F
....................    data(0); 
013A:  CLRF   22
013B:  CALL   004
....................    clk(); 
013C:  CALL   016
013D:  INCF   20,F
013E:  GOTO   136
....................    } 
013F:  RETURN
.................... } 
.................... void high() 
.................... { 
....................    data(1); 
*
0032:  MOVLW  01
0033:  MOVWF  22
0034:  CALL   004
....................    clk(); 
0035:  CALL   016
0036:  RETURN
.................... } 
.................... void low() 
.................... { 
....................    data(0); 
....................    clk(); 
.................... } 
.................... void main() 
*
0140:  MOVF   03,W
0141:  ANDLW  1F
0142:  MOVWF  03
0143:  CLRF   20
0144:  MOVLW  FF
0145:  MOVWF  21
0146:  BSF    03.5
0147:  BSF    03.6
0148:  MOVF   09,W
0149:  ANDLW  C0
014A:  MOVWF  09
014B:  BCF    03.6
014C:  BCF    1F.4
014D:  BCF    1F.5
014E:  MOVLW  00
014F:  BSF    03.6
0150:  MOVWF  08
0151:  BCF    03.5
0152:  CLRF   07
0153:  CLRF   08
0154:  CLRF   09
0155:  BCF    03.7
.................... { 
....................    while(TRUE) 
....................    { 
....................    //0 
....................    zero(); 
0156:  BCF    03.6
0157:  CALL   023
....................    high(); 
0158:  CALL   032
....................    zero(); 
0159:  CALL   023
....................    latch(); 
015A:  CALL   037
....................    //1 
....................    one(); 
015B:  CALL   05D
....................    high(); 
015C:  CALL   032
....................    one(); 
015D:  CALL   05D
....................    latch(); 
015E:  CALL   037
....................    //2 
....................    two(); 
015F:  CALL   077
....................    high(); 
0160:  CALL   032
....................    two(); 
0161:  CALL   077
....................    latch(); 
0162:  CALL   037
....................    //3 
....................    three(); 
0163:  CALL   097
....................    high(); 
0164:  CALL   032
....................    three(); 
0165:  CALL   097
....................    latch(); 
0166:  CALL   037
....................    //4 
....................    four(); 
0167:  CALL   0B0
....................    high(); 
0168:  CALL   032
....................    four(); 
0169:  CALL   0B0
....................    latch(); 
016A:  CALL   037
....................    //5 
....................    five(); 
016B:  CALL   0D4
....................    high(); 
016C:  CALL   032
....................    five(); 
016D:  CALL   0D4
....................    latch(); 
016E:  CALL   037
....................    //6 
....................    six(); 
016F:  CALL   0F4
....................    high(); 
0170:  CALL   032
....................    six(); 
0171:  CALL   0F4
....................    latch(); 
0172:  CALL   037
....................    //7 
....................    seven(); 
0173:  CALL   106
....................    high(); 
0174:  CALL   032
....................    seven();  
0175:  CALL   106
....................    latch(); 
0176:  CALL   037
....................    //8 
....................    eight(); 
0177:  CALL   11C
....................    high(); 
0178:  CALL   032
....................    eight(); 
0179:  CALL   11C
....................    latch();    
017A:  CALL   037
....................    //9 
....................    nine(); 
017B:  CALL   127
....................    high(); 
017C:  CALL   032
....................    nine(); 
017D:  CALL   127
....................    latch(); 
017E:  CALL   037
017F:  GOTO   157
....................     
....................     
....................       //TODO: User Code 
....................   } 
.................... } 
....................  
0180:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
