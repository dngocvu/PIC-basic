CCS PCM C Compiler, Version 5.078, 43599               04-Nov-18 00:17

               Filename:   E:\bai tap vdk\led7\bài4\main4.lst

               ROM used:   149 words (2%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           12 (3%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   04D
0003:  NOP
.................... #include <main4.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  MOVF   23,W
0013:  XORWF  24,W
0014:  ANDLW  80
0015:  MOVWF  26
0016:  BTFSS  23.7
0017:  GOTO   01A
0018:  COMF   23,F
0019:  INCF   23,F
001A:  BTFSS  24.7
001B:  GOTO   01E
001C:  COMF   24,F
001D:  INCF   24,F
001E:  MOVF   24,W
001F:  CLRF   78
0020:  SUBWF  23,W
0021:  BTFSC  03.0
0022:  GOTO   026
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  GOTO   032
0026:  CLRF   77
0027:  MOVLW  08
0028:  MOVWF  25
0029:  RLF    23,F
002A:  RLF    77,F
002B:  MOVF   24,W
002C:  SUBWF  77,W
002D:  BTFSC  03.0
002E:  MOVWF  77
002F:  RLF    78,F
0030:  DECFSZ 25,F
0031:  GOTO   029
0032:  BTFSS  26.7
0033:  GOTO   036
0034:  COMF   78,F
0035:  INCF   78,F
0036:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0037:  MOVLW  23
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04A
003D:  MOVLW  06
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  7B
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  DECFSZ 00,F
0049:  GOTO   03D
004A:  BCF    0A.3
004B:  BCF    0A.4
004C:  GOTO   091 (RETURN)
....................  
....................  
....................  
.................... const unsigned int8 ma7doan[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90}; 
.................... signed int dem; 
.................... unsigned int ma_dem; 
.................... void main() 
004D:  MOVF   03,W
004E:  ANDLW  1F
004F:  MOVWF  03
0050:  MOVLW  FF
0051:  MOVWF  22
0052:  BSF    03.5
0053:  BSF    03.6
0054:  MOVF   09,W
0055:  ANDLW  C0
0056:  MOVWF  09
0057:  BCF    03.6
0058:  BCF    1F.4
0059:  BCF    1F.5
005A:  MOVLW  00
005B:  BSF    03.6
005C:  MOVWF  08
005D:  BCF    03.5
005E:  CLRF   07
005F:  CLRF   08
0060:  CLRF   09
0061:  BCF    03.7
.................... { 
....................    set_tris_c(0x00); 
0062:  MOVLW  00
0063:  BSF    03.5
0064:  BCF    03.6
0065:  MOVWF  07
0066:  BCF    03.5
0067:  MOVWF  22
....................    set_tris_d(0x00); // input port d 
0068:  BSF    03.5
0069:  MOVWF  08
....................    while(TRUE) 
....................    { 
....................       for(dem=0;dem<100;dem++) 
006A:  BCF    03.5
006B:  CLRF   20
006C:  BTFSC  20.7
006D:  GOTO   072
006E:  MOVF   20,W
006F:  SUBLW  63
0070:  BTFSS  03.0
0071:  GOTO   093
....................          {  
....................             output_c(ma7doan[dem/10]); 
0072:  MOVF   20,W
0073:  MOVWF  23
0074:  MOVLW  0A
0075:  MOVWF  24
0076:  CALL   012
0077:  MOVF   78,W
0078:  CALL   004
0079:  MOVWF  23
007A:  MOVLW  00
007B:  MOVWF  22
007C:  BSF    03.5
007D:  CLRF   07
007E:  BCF    03.5
007F:  MOVF   23,W
0080:  MOVWF  07
....................             output_d(ma7doan[dem%10]); 
0081:  MOVF   20,W
0082:  MOVWF  23
0083:  MOVLW  0A
0084:  MOVWF  24
0085:  CALL   012
0086:  MOVF   77,W
0087:  CALL   004
0088:  MOVWF  23
0089:  BSF    03.5
008A:  CLRF   08
008B:  BCF    03.5
008C:  MOVF   23,W
008D:  MOVWF  08
....................             delay_ms(50); 
008E:  MOVLW  32
008F:  MOVWF  23
0090:  GOTO   037
0091:  INCF   20,F
0092:  GOTO   06C
....................          } 
0093:  GOTO   06B
....................  
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
0094:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
