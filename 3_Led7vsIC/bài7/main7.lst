CCS PCM C Compiler, Version 5.078, 43599               05-Nov-18 22:57

               Filename:   E:\bai tap vdk\3_Led7vsIC\bài7\main7.lst

               ROM used:   385 words (5%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           9 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   140
0003:  NOP
.................... #include <main7.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
0060:  MOVLW  23
0061:  MOVWF  04
0062:  BCF    03.7
0063:  MOVF   00,W
0064:  BTFSC  03.2
0065:  GOTO   073
0066:  MOVLW  06
0067:  MOVWF  78
0068:  CLRF   77
0069:  DECFSZ 77,F
006A:  GOTO   069
006B:  DECFSZ 78,F
006C:  GOTO   068
006D:  MOVLW  7B
006E:  MOVWF  77
006F:  DECFSZ 77,F
0070:  GOTO   06F
0071:  DECFSZ 00,F
0072:  GOTO   066
....................  
....................  
.................... unsigned int8 i=0; 
....................  
.................... void data(unsigned char d) 
.................... { 
....................    if(d==1) {output_high(pin_c1);} 
*
0004:  DECFSZ 22,W
0005:  GOTO   00C
0006:  BCF    21.1
0007:  MOVF   21,W
0008:  BSF    03.5
0009:  MOVWF  07
000A:  BCF    03.5
000B:  BSF    07.1
....................    if(d==0) {output_low(pin_c1);} 
000C:  MOVF   22,F
000D:  BTFSS  03.2
000E:  GOTO   015
000F:  BCF    21.1
0010:  MOVF   21,W
0011:  BSF    03.5
0012:  MOVWF  07
0013:  BCF    03.5
0014:  BCF    07.1
0015:  RETURN
.................... } 
.................... void clk() 
.................... { 
....................    output_high(pin_c0); 
0016:  BCF    21.0
0017:  MOVF   21,W
0018:  BSF    03.5
0019:  MOVWF  07
001A:  BCF    03.5
001B:  BSF    07.0
....................    output_low(pin_c0); 
001C:  BCF    21.0
001D:  MOVF   21,W
001E:  BSF    03.5
001F:  MOVWF  07
0020:  BCF    03.5
0021:  BCF    07.0
0022:  RETURN
.................... } 
.................... void latch() 
.................... { 
....................    output_high(pin_c2); 
*
0050:  BCF    21.2
0051:  MOVF   21,W
0052:  BSF    03.5
0053:  MOVWF  07
0054:  BCF    03.5
0055:  BSF    07.2
....................    output_low(pin_c2); 
0056:  BCF    21.2
0057:  MOVF   21,W
0058:  BSF    03.5
0059:  MOVWF  07
005A:  BCF    03.5
005B:  BCF    07.2
....................    delay_ms(500); 
005C:  MOVLW  02
005D:  MOVWF  22
005E:  MOVLW  FA
005F:  MOVWF  23
*
0073:  DECFSZ 22,F
0074:  GOTO   05E
0075:  RETURN
.................... } 
.................... void zero() 
.................... { 
....................    data(1); 
*
0041:  MOVLW  01
0042:  MOVWF  22
0043:  CALL   004
....................    clk(); 
0044:  CALL   016
....................    for(i=0;i<6;i++){ 
0045:  CLRF   20
0046:  MOVF   20,W
0047:  SUBLW  05
0048:  BTFSS  03.0
0049:  GOTO   04F
....................    data(0); 
004A:  CLRF   22
004B:  CALL   004
....................    clk(); 
004C:  CALL   016
004D:  INCF   20,F
004E:  GOTO   046
.................... } 
004F:  RETURN
.................... } 
.................... void one() 
.................... { 
....................    for(i=0;i<4;i++){ 
*
0081:  CLRF   20
0082:  MOVF   20,W
0083:  SUBLW  03
0084:  BTFSS  03.0
0085:  GOTO   08C
....................    data(1); 
0086:  MOVLW  01
0087:  MOVWF  22
0088:  CALL   004
....................    clk(); 
0089:  CALL   016
008A:  INCF   20,F
008B:  GOTO   082
....................    } 
....................    for(i=0;i<2;i++){ 
008C:  CLRF   20
008D:  MOVF   20,W
008E:  SUBLW  01
008F:  BTFSS  03.0
0090:  GOTO   096
....................    data(0); 
0091:  CLRF   22
0092:  CALL   004
....................    clk(); 
0093:  CALL   016
0094:  INCF   20,F
0095:  GOTO   08D
....................    } 
....................    data(1); 
0096:  MOVLW  01
0097:  MOVWF  22
0098:  CALL   004
....................    clk(); 
0099:  CALL   016
009A:  RETURN
.................... } 
.................... void two() 
.................... { 
....................    data(0); 
*
00B1:  CLRF   22
00B2:  CALL   004
....................    clk(); 
00B3:  CALL   016
....................    data(1); 
00B4:  MOVLW  01
00B5:  MOVWF  22
00B6:  CALL   004
....................    clk(); 
00B7:  CALL   016
....................    for(i=0;i<2;i++){ 
00B8:  CLRF   20
00B9:  MOVF   20,W
00BA:  SUBLW  01
00BB:  BTFSS  03.0
00BC:  GOTO   0C2
....................    data(0); 
00BD:  CLRF   22
00BE:  CALL   004
....................    clk(); 
00BF:  CALL   016
00C0:  INCF   20,F
00C1:  GOTO   0B9
....................    } 
....................    data(1); 
00C2:  MOVLW  01
00C3:  MOVWF  22
00C4:  CALL   004
....................    clk(); 
00C5:  CALL   016
....................    for(i=0;i<2;i++){ 
00C6:  CLRF   20
00C7:  MOVF   20,W
00C8:  SUBLW  01
00C9:  BTFSS  03.0
00CA:  GOTO   0D0
....................    data(0); 
00CB:  CLRF   22
00CC:  CALL   004
....................    clk(); 
00CD:  CALL   016
00CE:  INCF   20,F
00CF:  GOTO   0C7
....................    } 
00D0:  RETURN
.................... } 
.................... void three() 
.................... { 
....................    data(0); 
*
00E3:  CLRF   22
00E4:  CALL   004
....................    clk(); 
00E5:  CALL   016
....................    for(i=0;i<2;i++){ 
00E6:  CLRF   20
00E7:  MOVF   20,W
00E8:  SUBLW  01
00E9:  BTFSS  03.0
00EA:  GOTO   0F1
....................    data(1); 
00EB:  MOVLW  01
00EC:  MOVWF  22
00ED:  CALL   004
....................    clk(); 
00EE:  CALL   016
00EF:  INCF   20,F
00F0:  GOTO   0E7
....................    } 
....................    for(i=0;i<4;i++){ 
00F1:  CLRF   20
00F2:  MOVF   20,W
00F3:  SUBLW  03
00F4:  BTFSS  03.0
00F5:  GOTO   0FB
....................    data(0); 
00F6:  CLRF   22
00F7:  CALL   004
....................    clk(); 
00F8:  CALL   016
00F9:  INCF   20,F
00FA:  GOTO   0F2
....................    } 
00FB:  RETURN
.................... } 
.................... void four() 
.................... { 
....................    for(i=0;i<2;i++){ 
*
011C:  CLRF   20
011D:  MOVF   20,W
011E:  SUBLW  01
011F:  BTFSS  03.0
0120:  GOTO   126
....................    data(0); 
0121:  CLRF   22
0122:  CALL   004
....................    clk(); 
0123:  CALL   016
0124:  INCF   20,F
0125:  GOTO   11D
....................    } 
....................    for(i=0;i<2;i++){ 
0126:  CLRF   20
0127:  MOVF   20,W
0128:  SUBLW  01
0129:  BTFSS  03.0
012A:  GOTO   131
....................    data(1); 
012B:  MOVLW  01
012C:  MOVWF  22
012D:  CALL   004
....................    clk(); 
012E:  CALL   016
012F:  INCF   20,F
0130:  GOTO   127
....................    } 
....................    for(i=0;i<2;i++){ 
0131:  CLRF   20
0132:  MOVF   20,W
0133:  SUBLW  01
0134:  BTFSS  03.0
0135:  GOTO   13B
....................    data(0); 
0136:  CLRF   22
0137:  CALL   004
....................    clk(); 
0138:  CALL   016
0139:  INCF   20,F
013A:  GOTO   132
....................    } 
....................    data(1); 
013B:  MOVLW  01
013C:  MOVWF  22
013D:  CALL   004
....................    clk(); 
013E:  CALL   016
013F:  RETURN
.................... } 
.................... void five() 
.................... { 
....................    for(i=0;i<2;i++){ 
*
00FC:  CLRF   20
00FD:  MOVF   20,W
00FE:  SUBLW  01
00FF:  BTFSS  03.0
0100:  GOTO   106
....................    data(0); 
0101:  CLRF   22
0102:  CALL   004
....................    clk(); 
0103:  CALL   016
0104:  INCF   20,F
0105:  GOTO   0FD
....................    } 
....................    data(1); 
0106:  MOVLW  01
0107:  MOVWF  22
0108:  CALL   004
....................    clk(); 
0109:  CALL   016
....................    for(i=0;i<2;i++){ 
010A:  CLRF   20
010B:  MOVF   20,W
010C:  SUBLW  01
010D:  BTFSS  03.0
010E:  GOTO   114
....................    data(0); 
010F:  CLRF   22
0110:  CALL   004
....................    clk(); 
0111:  CALL   016
0112:  INCF   20,F
0113:  GOTO   10B
....................    } 
....................    data(1); 
0114:  MOVLW  01
0115:  MOVWF  22
0116:  CALL   004
....................    clk(); 
0117:  CALL   016
....................    data(0); 
0118:  CLRF   22
0119:  CALL   004
....................    clk(); 
011A:  CALL   016
011B:  RETURN
.................... }   
.................... void six() 
.................... { 
....................    for(i=0;i<5;i++){ 
*
00D1:  CLRF   20
00D2:  MOVF   20,W
00D3:  SUBLW  04
00D4:  BTFSS  03.0
00D5:  GOTO   0DB
....................    data(0); 
00D6:  CLRF   22
00D7:  CALL   004
....................    clk(); 
00D8:  CALL   016
00D9:  INCF   20,F
00DA:  GOTO   0D2
....................    } 
....................    data(1); 
00DB:  MOVLW  01
00DC:  MOVWF  22
00DD:  CALL   004
....................    clk(); 
00DE:  CALL   016
....................    data(0); 
00DF:  CLRF   22
00E0:  CALL   004
....................    clk(); 
00E1:  CALL   016
00E2:  RETURN
.................... } 
.................... void seven() 
.................... { 
....................    for(i=0;i<4;i++){ 
*
009B:  CLRF   20
009C:  MOVF   20,W
009D:  SUBLW  03
009E:  BTFSS  03.0
009F:  GOTO   0A6
....................    data(1); 
00A0:  MOVLW  01
00A1:  MOVWF  22
00A2:  CALL   004
....................    clk(); 
00A3:  CALL   016
00A4:  INCF   20,F
00A5:  GOTO   09C
....................    } 
....................    for(i=0;i<3;i++){ 
00A6:  CLRF   20
00A7:  MOVF   20,W
00A8:  SUBLW  02
00A9:  BTFSS  03.0
00AA:  GOTO   0B0
....................    data(0); 
00AB:  CLRF   22
00AC:  CALL   004
....................    clk(); 
00AD:  CALL   016
00AE:  INCF   20,F
00AF:  GOTO   0A7
....................    } 
00B0:  RETURN
.................... } 
.................... void eight() 
.................... { 
....................    for(i=0;i<7;i++){ 
*
0076:  CLRF   20
0077:  MOVF   20,W
0078:  SUBLW  06
0079:  BTFSS  03.0
007A:  GOTO   080
....................    data(0); 
007B:  CLRF   22
007C:  CALL   004
....................    clk(); 
007D:  CALL   016
007E:  INCF   20,F
007F:  GOTO   077
....................    } 
0080:  RETURN
.................... } 
.................... void nine() 
.................... { 
....................    for(i=0;i<2;i++){ 
*
0023:  CLRF   20
0024:  MOVF   20,W
0025:  SUBLW  01
0026:  BTFSS  03.0
0027:  GOTO   02D
....................    data(0); 
0028:  CLRF   22
0029:  CALL   004
....................    clk(); 
002A:  CALL   016
002B:  INCF   20,F
002C:  GOTO   024
....................    } 
....................    data(1); 
002D:  MOVLW  01
002E:  MOVWF  22
002F:  CALL   004
....................    clk(); 
0030:  CALL   016
....................    for(i=0;i<4;i++){ 
0031:  CLRF   20
0032:  MOVF   20,W
0033:  SUBLW  03
0034:  BTFSS  03.0
0035:  GOTO   03B
....................    data(0); 
0036:  CLRF   22
0037:  CALL   004
....................    clk(); 
0038:  CALL   016
0039:  INCF   20,F
003A:  GOTO   032
....................    } 
003B:  RETURN
.................... } 
.................... void high() 
.................... { 
....................    data(1); 
003C:  MOVLW  01
003D:  MOVWF  22
003E:  CALL   004
....................    clk(); 
003F:  CALL   016
0040:  RETURN
.................... } 
.................... void low() 
.................... { 
....................    data(0); 
....................    clk(); 
.................... } 
.................... void main() 
*
0140:  MOVF   03,W
0141:  ANDLW  1F
0142:  MOVWF  03
0143:  CLRF   20
0144:  MOVLW  FF
0145:  MOVWF  21
0146:  BSF    03.5
0147:  BSF    03.6
0148:  MOVF   09,W
0149:  ANDLW  C0
014A:  MOVWF  09
014B:  BCF    03.6
014C:  BCF    1F.4
014D:  BCF    1F.5
014E:  MOVLW  00
014F:  BSF    03.6
0150:  MOVWF  08
0151:  BCF    03.5
0152:  CLRF   07
0153:  CLRF   08
0154:  CLRF   09
0155:  BCF    03.7
.................... { 
....................    while(TRUE) 
....................    { 
....................    //0 
....................    nine(); 
0156:  BCF    03.6
0157:  CALL   023
....................    high(); 
0158:  CALL   03C
....................    zero(); 
0159:  CALL   041
....................    latch(); 
015A:  CALL   050
....................    //1 
....................    eight(); 
015B:  CALL   076
....................    high(); 
015C:  CALL   03C
....................    one(); 
015D:  CALL   081
....................    latch(); 
015E:  CALL   050
....................    //2 
....................    seven(); 
015F:  CALL   09B
....................    high(); 
0160:  CALL   03C
....................    two(); 
0161:  CALL   0B1
....................    latch(); 
0162:  CALL   050
....................    //3 
....................    six(); 
0163:  CALL   0D1
....................    high(); 
0164:  CALL   03C
....................    three(); 
0165:  CALL   0E3
....................    latch(); 
0166:  CALL   050
....................    //4 
....................    five(); 
0167:  CALL   0FC
....................    high(); 
0168:  CALL   03C
....................    four(); 
0169:  CALL   11C
....................    latch(); 
016A:  CALL   050
....................    //5 
....................    four(); 
016B:  CALL   11C
....................    high(); 
016C:  CALL   03C
....................    five(); 
016D:  CALL   0FC
....................    latch(); 
016E:  CALL   050
....................    //6 
....................    three(); 
016F:  CALL   0E3
....................    high(); 
0170:  CALL   03C
....................    six(); 
0171:  CALL   0D1
....................    latch(); 
0172:  CALL   050
....................    //7 
....................    two(); 
0173:  CALL   0B1
....................    high(); 
0174:  CALL   03C
....................    seven(); 
0175:  CALL   09B
....................    latch(); 
0176:  CALL   050
....................    //8 
....................    one(); 
0177:  CALL   081
....................    high(); 
0178:  CALL   03C
....................    eight(); 
0179:  CALL   076
....................    latch();    
017A:  CALL   050
....................    //9 
....................    zero(); 
017B:  CALL   041
....................    high(); 
017C:  CALL   03C
....................    nine(); 
017D:  CALL   023
....................    latch(); 
017E:  CALL   050
017F:  GOTO   157
....................     
....................     
....................       //TODO: User Code 
....................   } 
.................... } 
....................  
0180:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
