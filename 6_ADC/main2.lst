CCS PCM C Compiler, Version 5.078, 43599               16-Dec-18 22:44

               Filename:   E:\bai tap vdk\6_ADC\main2.lst

               ROM used:   538 words (7%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           19 (5%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   17A
0003:  NOP
.................... #include <main2.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  DATA 61,32
0013:  DATA 63,10
0014:  DATA F6,30
0015:  DATA EC,3A
0016:  DATA E5,1E
0017:  DATA A0,12
0018:  DATA 30,1A
0019:  DATA 6C,32
001A:  DATA 0D,05
001B:  DATA 00,00
*
0032:  MOVF   0B,W
0033:  MOVWF  26
0034:  BCF    0B.7
0035:  BSF    03.5
0036:  BSF    03.6
0037:  BSF    0C.7
0038:  BSF    0C.0
0039:  NOP
003A:  NOP
003B:  BCF    03.5
003C:  BCF    03.6
003D:  BTFSC  26.7
003E:  BSF    0B.7
003F:  BTFSC  03.0
0040:  GOTO   06A
0041:  BSF    03.6
0042:  MOVF   0C,W
0043:  ANDLW  7F
0044:  BCF    03.6
0045:  MOVWF  26
0046:  BSF    03.6
0047:  MOVF   0D,W
0048:  BCF    03.6
0049:  MOVWF  27
004A:  BSF    03.6
004B:  MOVF   0F,W
004C:  BCF    03.6
004D:  MOVWF  28
004E:  MOVF   26,W
004F:  BTFSS  0C.4
0050:  GOTO   04F
0051:  MOVWF  19
0052:  MOVF   27,W
0053:  BSF    03.6
0054:  MOVWF  0D
0055:  BCF    03.6
0056:  MOVF   28,W
0057:  BSF    03.6
0058:  MOVWF  0F
0059:  BCF    03.6
005A:  MOVF   0B,W
005B:  MOVWF  29
005C:  BCF    0B.7
005D:  BSF    03.5
005E:  BSF    03.6
005F:  BSF    0C.7
0060:  BSF    0C.0
0061:  NOP
0062:  NOP
0063:  BCF    03.5
0064:  BCF    03.6
0065:  BTFSC  29.7
0066:  BSF    0B.7
0067:  DECFSZ 25,F
0068:  GOTO   06A
0069:  GOTO   08A
006A:  BSF    03.6
006B:  RLF    0C,W
006C:  RLF    0E,W
006D:  ANDLW  7F
006E:  BCF    03.6
006F:  MOVWF  26
0070:  BSF    03.6
0071:  MOVF   0D,W
0072:  BCF    03.6
0073:  MOVWF  27
0074:  BSF    03.6
0075:  MOVF   0F,W
0076:  BCF    03.6
0077:  MOVWF  28
0078:  MOVF   26,W
0079:  BTFSS  0C.4
007A:  GOTO   079
007B:  MOVWF  19
007C:  MOVF   27,W
007D:  BSF    03.6
007E:  MOVWF  0D
007F:  BCF    03.6
0080:  MOVF   28,W
0081:  BSF    03.6
0082:  MOVWF  0F
0083:  INCF   0D,F
0084:  BTFSC  03.2
0085:  INCF   0F,F
0086:  BCF    03.0
0087:  BCF    03.6
0088:  DECFSZ 25,F
0089:  GOTO   032
008A:  BCF    0A.3
008B:  BCF    0A.4
008C:  GOTO   1EF (RETURN)
008D:  CLRF   2D
008E:  MOVF   04,W
008F:  MOVWF  2C
0090:  BCF    2D.0
0091:  BTFSC  03.7
0092:  BSF    2D.0
0093:  BTFSS  26.7
0094:  GOTO   09D
0095:  BSF    2C.7
0096:  BTFSS  2C.4
0097:  INCF   2C,F
0098:  COMF   25,F
0099:  COMF   26,F
009A:  INCF   25,F
009B:  BTFSC  03.2
009C:  INCF   26,F
009D:  SWAPF  26,W
009E:  IORLW  F0
009F:  MOVWF  28
00A0:  ADDWF  28,F
00A1:  ADDLW  E2
00A2:  MOVWF  29
00A3:  ADDLW  32
00A4:  MOVWF  2B
00A5:  MOVF   26,W
00A6:  ANDLW  0F
00A7:  ADDWF  29,F
00A8:  ADDWF  29,F
00A9:  ADDWF  2B,F
00AA:  ADDLW  E9
00AB:  MOVWF  2A
00AC:  ADDWF  2A,F
00AD:  ADDWF  2A,F
00AE:  SWAPF  25,W
00AF:  ANDLW  0F
00B0:  ADDWF  2A,F
00B1:  ADDWF  2B,F
00B2:  RLF    2A,F
00B3:  RLF    2B,F
00B4:  COMF   2B,F
00B5:  RLF    2B,F
00B6:  MOVF   25,W
00B7:  ANDLW  0F
00B8:  ADDWF  2B,F
00B9:  RLF    28,F
00BA:  MOVLW  07
00BB:  MOVWF  27
00BC:  MOVLW  0A
00BD:  ADDWF  2B,F
00BE:  DECF   2A,F
00BF:  BTFSS  03.0
00C0:  GOTO   0BD
00C1:  ADDWF  2A,F
00C2:  DECF   29,F
00C3:  BTFSS  03.0
00C4:  GOTO   0C1
00C5:  ADDWF  29,F
00C6:  DECF   28,F
00C7:  BTFSS  03.0
00C8:  GOTO   0C5
00C9:  ADDWF  28,F
00CA:  DECF   27,F
00CB:  BTFSS  03.0
00CC:  GOTO   0C9
00CD:  MOVLW  27
00CE:  MOVWF  04
00CF:  BCF    03.7
00D0:  MOVLW  07
00D1:  ANDWF  2C,W
00D2:  BCF    2C.6
00D3:  DECF   04,F
00D4:  ANDWF  2C,W
00D5:  BTFSS  03.2
00D6:  GOTO   0DE
00D7:  BTFSC  2C.4
00D8:  INCF   04,F
00D9:  BTFSC  2C.4
00DA:  GOTO   0DE
00DB:  MOVLW  20
00DC:  MOVWF  77
00DD:  GOTO   0FB
00DE:  ADDWF  04,F
00DF:  MOVLW  2B
00E0:  SUBWF  04,W
00E1:  BTFSC  03.2
00E2:  BSF    2C.6
00E3:  MOVF   00,W
00E4:  MOVWF  77
00E5:  BTFSS  03.2
00E6:  GOTO   0EF
00E7:  BTFSC  2C.6
00E8:  GOTO   0EF
00E9:  BTFSC  2C.4
00EA:  GOTO   0FF
00EB:  BTFSC  2C.3
00EC:  GOTO   0EF
00ED:  MOVLW  20
00EE:  GOTO   0FA
00EF:  BTFSS  2C.7
00F0:  GOTO   0F7
00F1:  MOVLW  2D
00F2:  MOVWF  77
00F3:  DECF   04,F
00F4:  BCF    2C.6
00F5:  BCF    2C.7
00F6:  GOTO   0FB
00F7:  BSF    2C.3
00F8:  BCF    2C.4
00F9:  MOVLW  30
00FA:  ADDWF  77,F
00FB:  MOVF   77,W
00FC:  BTFSS  0C.4
00FD:  GOTO   0FC
00FE:  MOVWF  19
00FF:  INCF   04,F
0100:  BTFSS  2C.6
0101:  GOTO   0DF
0102:  BCF    0A.3
0103:  BCF    0A.4
0104:  GOTO   1F6 (RETURN)
0105:  MOVLW  10
0106:  MOVWF  29
0107:  CLRF   77
0108:  CLRF   7A
0109:  RRF    26,F
010A:  RRF    25,F
010B:  BTFSS  03.0
010C:  GOTO   113
010D:  MOVF   27,W
010E:  ADDWF  77,F
010F:  BTFSC  03.0
0110:  INCF   7A,F
0111:  MOVF   28,W
0112:  ADDWF  7A,F
0113:  RRF    7A,F
0114:  RRF    77,F
0115:  RRF    79,F
0116:  RRF    78,F
0117:  DECFSZ 29,F
0118:  GOTO   109
0119:  BCF    0A.3
011A:  BCF    0A.4
011B:  GOTO   206 (RETURN)
011C:  CLRF   78
011D:  CLRF   79
011E:  CLRF   77
011F:  CLRF   7A
0120:  MOVF   2A,W
0121:  BTFSS  03.2
0122:  GOTO   126
0123:  MOVF   29,W
0124:  BTFSC  03.2
0125:  GOTO   140
0126:  MOVLW  10
0127:  MOVWF  2B
0128:  BCF    03.0
0129:  RLF    27,F
012A:  RLF    28,F
012B:  RLF    77,F
012C:  RLF    7A,F
012D:  MOVF   2A,W
012E:  SUBWF  7A,W
012F:  BTFSS  03.2
0130:  GOTO   133
0131:  MOVF   29,W
0132:  SUBWF  77,W
0133:  BTFSS  03.0
0134:  GOTO   13C
0135:  MOVF   29,W
0136:  SUBWF  77,F
0137:  BTFSS  03.0
0138:  DECF   7A,F
0139:  MOVF   2A,W
013A:  SUBWF  7A,F
013B:  BSF    03.0
013C:  RLF    78,F
013D:  RLF    79,F
013E:  DECFSZ 2B,F
013F:  GOTO   128
0140:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
....................  
....................  
.................... #define POT pin_e2 
.................... const unsigned int8 led7seg[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90}; 
.................... unsigned int16 cnt;          // count 
.................... unsigned int16 VALUE_ADC;  
.................... #use delay(crystal=20M) 
*
001C:  MOVLW  25
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   02F
0022:  MOVLW  06
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  7B
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 00,F
002E:  GOTO   022
002F:  BCF    0A.3
0030:  BCF    0A.4
0031:  GOTO   1E5 (RETURN)
.................... #use rs232(uart1, baud = 9600) 
....................  
.................... void Display_LED_TIME() 
.................... { 
....................    output_a(led7seg[VALUE_ADC%10]); 
*
0141:  MOVF   23,W
0142:  MOVWF  28
0143:  MOVF   22,W
0144:  MOVWF  27
0145:  CLRF   2A
0146:  MOVLW  0A
0147:  MOVWF  29
0148:  CALL   11C
0149:  MOVF   77,W
014A:  MOVWF  25
014B:  MOVF   7A,W
014C:  MOVWF  26
014D:  MOVWF  7A
014E:  MOVF   77,W
014F:  CALL   004
0150:  MOVWF  27
0151:  BSF    03.5
0152:  CLRF   05
0153:  BCF    03.5
0154:  MOVF   27,W
0155:  MOVWF  05
....................    output_b(led7seg[VALUE_ADC/10%10]);   
0156:  MOVF   23,W
0157:  MOVWF  28
0158:  MOVF   22,W
0159:  MOVWF  27
015A:  CLRF   2A
015B:  MOVLW  0A
015C:  MOVWF  29
015D:  CALL   11C
015E:  MOVF   79,W
015F:  MOVWF  26
0160:  MOVF   78,W
0161:  MOVWF  25
0162:  MOVF   79,W
0163:  MOVWF  28
0164:  MOVF   78,W
0165:  MOVWF  27
0166:  CLRF   2A
0167:  MOVLW  0A
0168:  MOVWF  29
0169:  CALL   11C
016A:  MOVF   77,W
016B:  MOVWF  25
016C:  MOVF   7A,W
016D:  MOVWF  26
016E:  MOVWF  7A
016F:  MOVF   77,W
0170:  CALL   004
0171:  MOVWF  27
0172:  BSF    03.5
0173:  CLRF   06
0174:  BCF    03.5
0175:  MOVF   27,W
0176:  MOVWF  06
0177:  BCF    0A.3
0178:  BCF    0A.4
0179:  GOTO   218 (RETURN)
.................... } 
.................... void Display_LED_REMAIN() 
.................... { 
....................     
.................... } 
....................  
.................... void main() 
017A:  MOVF   03,W
017B:  ANDLW  1F
017C:  MOVWF  03
017D:  BSF    03.5
017E:  BSF    03.6
017F:  BSF    07.3
0180:  MOVLW  08
0181:  BCF    03.6
0182:  MOVWF  19
0183:  MOVLW  02
0184:  MOVWF  1A
0185:  MOVLW  A6
0186:  MOVWF  18
0187:  MOVLW  90
0188:  BCF    03.5
0189:  MOVWF  18
018A:  MOVLW  FF
018B:  MOVWF  24
018C:  BSF    03.5
018D:  BSF    03.6
018E:  MOVF   09,W
018F:  ANDLW  C0
0190:  MOVWF  09
0191:  BCF    03.6
0192:  BCF    1F.4
0193:  BCF    1F.5
0194:  MOVLW  00
0195:  BSF    03.6
0196:  MOVWF  08
0197:  BCF    03.5
0198:  CLRF   07
0199:  CLRF   08
019A:  CLRF   09
019B:  BCF    03.7
.................... { 
....................    set_tris_a(0x00); 
019C:  MOVLW  00
019D:  BSF    03.5
019E:  BCF    03.6
019F:  MOVWF  05
....................    set_tris_b(0x00);// input port d 
01A0:  MOVWF  06
....................    set_tris_c(0xff); 
01A1:  MOVLW  FF
01A2:  MOVWF  07
01A3:  BCF    03.5
01A4:  MOVWF  24
....................    set_tris_d(0xff); 
01A5:  BSF    03.5
01A6:  MOVWF  08
....................    set_tris_e(0xff); 
01A7:  BSF    09.0
01A8:  BSF    09.1
01A9:  BSF    09.2
01AA:  BSF    09.3
....................    setup_adc(adc_clock_div_8); 
01AB:  BCF    03.5
01AC:  BSF    1F.6
01AD:  BCF    1F.7
01AE:  BSF    03.5
01AF:  BSF    1F.7
01B0:  BCF    03.5
01B1:  BSF    1F.0
....................    setup_adc_ports(san7); 
01B2:  BSF    03.5
01B3:  BSF    03.6
01B4:  MOVF   09,W
01B5:  ANDLW  C0
01B6:  MOVWF  09
01B7:  BCF    03.6
01B8:  BCF    1F.4
01B9:  BCF    1F.5
01BA:  MOVLW  80
01BB:  BSF    03.6
01BC:  MOVWF  08
....................    set_adc_channel(3); 
01BD:  MOVLW  0C
01BE:  MOVWF  78
01BF:  BCF    03.5
01C0:  BCF    03.6
01C1:  MOVF   1F,W
01C2:  ANDLW  C3
01C3:  IORWF  78,W
01C4:  MOVWF  1F
....................    while(TRUE) 
....................    {   
....................       VALUE_ADC=0; 
01C5:  CLRF   23
01C6:  CLRF   22
....................       cnt++; 
01C7:  INCF   20,F
01C8:  BTFSC  03.2
01C9:  INCF   21,F
....................       if(cnt>300) 
01CA:  MOVF   21,W
01CB:  SUBLW  00
01CC:  BTFSC  03.0
01CD:  GOTO   1E2
01CE:  XORLW  FF
01CF:  BTFSS  03.2
01D0:  GOTO   1D5
01D1:  MOVF   20,W
01D2:  SUBLW  2C
01D3:  BTFSC  03.0
01D4:  GOTO   1E2
....................       { 
....................           VALUE_ADC=VALUE_ADC+read_adc(); 
01D5:  BSF    1F.1
01D6:  BTFSC  1F.1
01D7:  GOTO   1D6
01D8:  BSF    03.5
01D9:  MOVF   1E,W
01DA:  BCF    03.5
01DB:  ADDWF  22,F
01DC:  MOVF   1E,W
01DD:  BTFSC  03.0
01DE:  INCFSZ 1E,W
01DF:  ADDWF  23,F
....................           cnt=0; 
01E0:  CLRF   21
01E1:  CLRF   20
....................       } 
....................       delay_ms(1); 
01E2:  MOVLW  01
01E3:  MOVWF  25
01E4:  GOTO   01C
....................       printf("adc value= %04ld\r\n",VALUE_ADC); 
01E5:  MOVLW  12
01E6:  BSF    03.6
01E7:  MOVWF  0D
01E8:  MOVLW  00
01E9:  MOVWF  0F
01EA:  BCF    03.0
01EB:  MOVLW  0B
01EC:  BCF    03.6
01ED:  MOVWF  25
01EE:  GOTO   032
01EF:  MOVLW  0A
01F0:  MOVWF  04
01F1:  MOVF   23,W
01F2:  MOVWF  26
01F3:  MOVF   22,W
01F4:  MOVWF  25
01F5:  GOTO   08D
01F6:  MOVLW  0D
01F7:  BTFSS  0C.4
01F8:  GOTO   1F7
01F9:  MOVWF  19
01FA:  MOVLW  0A
01FB:  BTFSS  0C.4
01FC:  GOTO   1FB
01FD:  MOVWF  19
....................       VALUE_ADC=VALUE_ADC*99/1023; 
01FE:  MOVF   23,W
01FF:  MOVWF  26
0200:  MOVF   22,W
0201:  MOVWF  25
0202:  CLRF   28
0203:  MOVLW  63
0204:  MOVWF  27
0205:  GOTO   105
0206:  MOVF   79,W
0207:  MOVWF  26
0208:  MOVF   78,W
0209:  MOVWF  25
020A:  MOVF   79,W
020B:  MOVWF  28
020C:  MOVF   78,W
020D:  MOVWF  27
020E:  MOVLW  03
020F:  MOVWF  2A
0210:  MOVLW  FF
0211:  MOVWF  29
0212:  CALL   11C
0213:  MOVF   79,W
0214:  MOVWF  23
0215:  MOVF   78,W
0216:  MOVWF  22
....................       Display_LED_TIME(); 
0217:  GOTO   141
0218:  GOTO   1C5
....................       //TODO: User Code 
....................    } 
.................... } 
....................  
0219:  SLEEP
....................  

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
